I"c;<p>여기서는 맥의 Xcode 개발 환경에서 <a href="http://www.boost.org">부스트(Boost) 라이브러리</a> 를 사용하는 방법을 정리합니다. <sup id="fnref:boost" role="doc-noteref"><a href="#fn:boost" class="footnote" rel="footnote">1</a></sup></p>

<p>원래 처음에 이 글은 작성할 때는 이지형님의 <a href="http://warmz.tistory.com">Warmz’s Dev</a> 라는 블로그에 있는 글을 많이 참고 했었습니다. 다만 글을 수정하는 과정에서 해당 글을 찾아보니 현재는 글이 삭제된 것 같습니다. <sup id="fnref:warmz" role="doc-noteref"><a href="#fn:warmz" class="footnote" rel="footnote">2</a></sup></p>

<blockquote>
  <p>맥에서 부스트 라이브러리를 설치하는 방법에 대해서 이 글을 처음 쓰는 당시에는 이지형님의 글이 큰 도움이 되었는데 안타깝습니다. 나중에 원 글을 찾게 되면 꼭 소개하도록 하겠습니다.</p>
</blockquote>

<p>Xcode에서 부스트 라이브러리를 사용하기 위해서는 부스트 라이브러리를 Xcode 용으로 빌드해야 합니다. 여기서는 부스트 라이브러리를 다운받아서 맥에서 사용할 수 있도록 빌드하고 Xcode에서 간단하게 테스트하는 것으로 마무리 하도록 하겠습니다.</p>

<h3 id="부스트boost-라이브러리-다운하기">부스트(Boost) 라이브러리 다운하기</h3>

<p>부스트 라이브러리는 부스트 공식 홈페이지인 <a href="http://www.boost.org">Boost.org</a> 에서 다운받을 수 있습니다. 이 글을 수정하고 있는 <strong>2017-01-15</strong> 일 현재 최신 빌드 버전은 <code class="language-plaintext highlighter-rouge">1.63.0</code>입니다. 부스트 라이브러리는 Boost.org의 GitHub 저장소인 <a href="https://github.com/boostorg/boost">boostorg/boost</a> 에서도 다운받을 수 있습니다. <sup id="fnref:github-boost" role="doc-noteref"><a href="#fn:github-boost" class="footnote" rel="footnote">3</a></sup> <sup id="fnref:multism" role="doc-noteref"><a href="#fn:multism" class="footnote" rel="footnote">4</a></sup></p>

<p>다운 받은 라이브러리의 압축을 풀고, 적당한 폴더에 둡니다. 뒤의 설명을 위해 여기서는 <code class="language-plaintext highlighter-rouge">~/Desktop/Boost</code> 폴더에 옮겼다고 가정합니다.</p>

<h3 id="부스트-라이브러리-빌드하기">부스트 라이브러리 빌드하기</h3>

<p>이제 Boost가 있는 폴더로 이동하여 아래와 같이 <code class="language-plaintext highlighter-rouge">bootstrap.sh</code> 쉘 파일을 실행합니다.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> ~/Desktop/Boost
<span class="nv">$ </span>./bootstrap.sh
</code></pre></div></div>

<p>그러면 <code class="language-plaintext highlighter-rouge">b2</code>라는 Boost를 설치할 수 있는 설치 파일이 생깁니다. 아래와 같이 옵션을 주고 b2를 실행합니다.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./b2 <span class="nv">toolset</span><span class="o">=</span>darwin <span class="nb">link</span><span class="o">=</span>static <span class="nv">threading</span><span class="o">=</span>multi address-model<span class="o">=</span>64 runtime-link<span class="o">=</span>static
</code></pre></div></div>

<p>위에서 <code class="language-plaintext highlighter-rouge">darwin</code> 은 맥에서 사용하기 위해 설정하는 값으로, 윈도우즈에서라면 다른 값이 들어가게 됩니다. 또한 <code class="language-plaintext highlighter-rouge">address-model</code>의 경우 시스템이 32비트인지 64비트인지를 체크하는 것 같아서 64로 지정했습니다. 이 과정에서 <a href="https://twitter.com/_taromati">taromati</a> 라는 아이디를 사용하는 <a href="https://twitter.com/_taromati">이재현</a>님의 블로그 글에서 도움을 받았습니다. <sup id="fnref:taromati" role="doc-noteref"><a href="#fn:taromati" class="footnote" rel="footnote">5</a></sup></p>

<p>실제 <code class="language-plaintext highlighter-rouge">b2</code> 실행과정에서 아래와 같이 <code class="language-plaintext highlighter-rouge">toolset</code> 값만 지정해줘도 나머지 옵션은 알아서 지정이 된다고 합니다. <sup id="fnref:sim9108" role="doc-noteref"><a href="#fn:sim9108" class="footnote" rel="footnote">6</a></sup></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./b2 <span class="nv">toolset</span><span class="o">=</span>darwin
</code></pre></div></div>

<p>따라서 위와 같이 해도 실행 결과는 처음과 같을 것입니다.</p>

<blockquote>
  <p>다만 실제로 제가 실습한 것은 아니라서 확실하지는 않습니다. 그냥 설치하실 때 참고하시면 될 것 같습니다.</p>
</blockquote>

<h3 id="xcode-프로젝트-설정하기">Xcode 프로젝트 설정하기</h3>

<p><code class="language-plaintext highlighter-rouge">b2</code>를 실행하고 나면 부스트 내부에 <strong>stage</strong> 라는 폴더가 생기고, 그 밑의 <strong>lib</strong> 폴더에 라이브러리 파일들이 위치합니다. Xcode에서 부스트 라이브러리를 사용하려면 프로젝트에 이 경로들을 지정하면 됩니다.</p>

<blockquote>
  <p>부스트 라이브러리를 빌드를 하고 나면 어떤 경로를 지정해주면 되는지 친철하게 결과를 터미널 창에 알려줍니다. 그 두 경로를 그대로 프로젝트에 지정하면 됩니다.</p>
</blockquote>

<p>예를 들어 <code class="language-plaintext highlighter-rouge">~/Desktop/Boost</code> 폴더에 설치가 되었다면 아래와 같은 경로가 나타날 것입니다. (참고로 뒤의 숫자는 버전에 따라 달라집니다.)</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Users/.../Desktop/Boost/boost_1_60_0  
/Users/.../Desktop/Boost/boost_1_60_0/stage/lib
</code></pre></div></div>

<p>위 두 경로를 각각 <strong>Targets</strong> 의 <strong>Build Settings &gt; Search Paths &gt; Header Search Paths</strong> 부분과 <strong>Library Search Paths</strong> 부분에 할당해 줍니다.</p>

<h3 id="부스트-라이브러리-테스트하기">부스트 라이브러리 테스트하기</h3>

<p>아래의 C++ 코드는 <a href="http://www.boost.org">Boost.org</a> 사이트에 있는 <a href="http://www.boost.org/doc/libs/1_60_0/libs/range/doc/html/range/reference/adaptors/reference/adjacent_filtered.html"><code class="language-plaintext highlighter-rouge">adjacent_filtered</code></a> 에 대한 예제 코드입니다. <sup id="fnref:adjacent-filtered" role="doc-noteref"><a href="#fn:adjacent-filtered" class="footnote" rel="footnote">7</a></sup></p>

<p>이 코드를 빌드하기 위해서는 당연히 부스트 라이브러리가 필요합니다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;boost/range/adaptor/adjacent_filtered.hpp&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;boost/range/algorithm/copy.hpp&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;boost/assign.hpp&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iterator&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;functional&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="k">using</span> <span class="k">namespace</span> <span class="n">boost</span><span class="o">::</span><span class="n">assign</span><span class="p">;</span>
    <span class="k">using</span> <span class="k">namespace</span> <span class="n">boost</span><span class="o">::</span><span class="n">adaptors</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">input</span><span class="p">;</span>
    <span class="n">input</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">;</span>

    <span class="n">boost</span><span class="o">::</span><span class="n">copy</span><span class="p">(</span>
        <span class="n">input</span> <span class="o">|</span> <span class="n">adjacent_filtered</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">not_equal_to</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">()),</span>
        <span class="n">std</span><span class="o">::</span><span class="n">ostream_iterator</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">,</span> <span class="s">","</span><span class="p">));</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>앞서 설명한 대로 Xcode 프로젝트를 설정하고 위의 코드를 실행하면 아래와 같은 결과를 출력합니다. 부스트 라이브러리가 잘 설치되었다면 문제없이 컴파일 될 것입니다.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1,2,3,4,5,6,Program ended with <span class="nb">exit </span>code: 0
</code></pre></div></div>

<p>이제 Xcode에서 부스트 라이브러리를 사용할 수 있는 환경을 갖추게 되었습니다.</p>

<h3 id="고찰-하기">고찰 하기</h3>

<p>경로를 지정하는 작업을 꼭 <strong>Targets</strong> 쪽에다 해줘야 하는 것인지, 또 매 프로젝트 마다 일일이 경로를 다시 지정해줘야 하는 것인지 확인이 필요합니다.</p>

<blockquote>
  <p>이 부분에 대해서는 <a href="https://twitter.com/_taromati">taromati</a> 님께서 직접 댓글을 달아 주셨습니다. <strong>Targets</strong> 에 path 설정은 매번 해야한다고 합니다.</p>
</blockquote>

<p>taromati 님의 원 블로그 글에는 시스템 관련 라이브러리들은 프레임웍(framework)을 지정하기도 했는데 이 부분은 iOS 때문에 하는 것으로 macOS 와는 다른 부분이라고 합니다.</p>

<blockquote>
  <p>taromati 님의 블로그가 사라져서 지금은 원 글을 확인할 수가 없는 상태입니다. 간단하게나마 아래에 있는 taromati 님의 댓글을 보시면 좋을 것 같습니다.</p>
</blockquote>

<h3 id="참고-자료">참고 자료</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:boost" role="doc-endnote">
      <p><a href="http://www.boost.org">Boost.org</a> : 부스트 라이브러리 공식 홈페이지입니다. <a href="#fnref:boost" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:warmz" role="doc-endnote">
      <p><a href="http://warmz.tistory.com">Warmz’s Dev</a> : 이지형님의 블로그입니다. 부스트 라이브러리 관련 글이 현재는 없어진 것 같습니다. 아마 블로그를 개편 중인 듯 합니다. <a href="#fnref:warmz" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:github-boost" role="doc-endnote">
      <p><a href="[boostorg/boost](https://github.com/boostorg/boost)">boostorg/boost</a> : Boost.org의 부스트 라이브러리 관련 GitHub  저장소입니다. <a href="#fnref:github-boost" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:multism" role="doc-endnote">
      <p>부스트 라이브러리를 GitHub 저장소에서도 다운받을 수 있다는 사실은 윤훈남님으로부터 알게 되었습니다. <a href="https://www.facebook.com/sim9108?fref=nf">윤훈남</a> 님은 수원에서 C++ 스터디를 운영하시고 있는데, 네이버 카페인 <a href="http://cafe.naver.com/multism">멀티즘 연합</a> 과 페이스북 <a href="https://www.facebook.com/groups/OpenCPP/">C++, OpenSource 스터디 모임</a> 을 통해 연락할 수 있습니다. <a href="#fnref:multism" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:taromati" role="doc-endnote">
      <p><a href="https://twitter.com/_taromati">taromati</a> : taromati라는 아이디를 사용하는 이재현(?)님의 트위터 계정인 것 같습니다. 부스트 라이브러리 설치와 관련해서 블로그 글로도 도움을 받고 직접 제 블로그에 답글도 달아주신 고마운 분이신데, 블로그가 사라진 것 같습니다. 마찬가지로 원 글을 찾게 되면 꼭 소개하도록 하겠습니다. 성함은 아이디로 찾아서 이재현님이라고 추측되는데 확실하지는 않아서 이후로는 계속 taromati 님이라고 하도록 하겠습니다. <a href="#fnref:taromati" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:sim9108" role="doc-endnote">
      <p>이 정보도 수원에서 C++ 스터디를 운영하시는 <a href="https://www.facebook.com/sim9108?fref=nf">윤훈남</a> 님에게서 설명을 듣고 알게된 것입니다. 윤훈남 님에 대해서는 참고 자료 4번을 보시기 바랍니다. <a href="#fnref:sim9108" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:adjacent-filtered" role="doc-endnote">
      <p><a href="http://www.boost.org/doc/libs/1_60_0/libs/range/doc/html/range/reference/adaptors/reference/adjacent_filtered.html"><code class="language-plaintext highlighter-rouge">adjacent_filtered</code></a> : 부스트 라이브러리에 추가된 <code class="language-plaintext highlighter-rouge">adjacent_filtered</code>에 대한 예제 코드 링크입니다. <code class="language-plaintext highlighter-rouge">adjacent_filtered</code>는 일정 범위의 요소들에 대해 옆 요소의 값이 같으면 걸러내는 필터 역할을 하는 것 같습니다. <a href="#fnref:adjacent-filtered" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET