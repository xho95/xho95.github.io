I"�<blockquote>
  <p>Apple 에서 공개한 <a href="https://docs.swift.org/swift-book/">The Swift Programming Language (Swift 5.2)</a> 책의 <a href="https://docs.swift.org/swift-book/ReferenceManual/Types.html#ID610">Self Type</a> 부분을 정리한 글입니다.<sup id="fnref:Self-Type" role="doc-noteref"><a href="#fn:Self-Type" class="footnote">1</a></sup> Swift 5.2 버전에 새로 추가된 내용에 대해 정리합니다.</p>

  <p>현재 전체 중에서 번역 완료된 목록은 <a href="/swift/programming/language/grammar/2017/02/28/The-Swift-Programming-Language.html">Swift 5.2: Swift Programming Language (스위프트 프로그래밍 언어)</a> 에서 확인할 수 있습니다.</p>
</blockquote>

<h2 id="types-타입">Types (타입)</h2>

<h3 id="self-type-자기-자신의-타입">Self Type (자기 자신의 타입)</h3>

<p><code class="highlighter-rouge">Self</code> (자기 자신의) 타입은 특정한 하나의 타입이 아니라, ‘현재 타입’ 을 편리하게 참조하도록 (refer to) 만든 것으로, 반복해서 입력할 필요없이 쓸 수도 있고 타입의 이름을 몰라도 쓸 수 있도록 만든 것입니다.</p>

<p>프로토콜 (protocol) 선언이나 프로토콜 멤버 선언에 있는 <code class="highlighter-rouge">Self</code> 타입은 그 프로토콜을 준수하는 최종 타입을 가리킵니다.</p>

<p>구조체 (structure), 클래스(class), 그리고 열거 타입(enumeration) 선언에 있는 <code class="highlighter-rouge">Self</code> 타입은 그 선언이 만들어내는 타입을 가리킵니다. 타입의 멤버 선언 내에 있는 <code class="highlighter-rouge">Self</code> 타입은 해당 타입을 나타냅니다. class 선언의 멤버 내에서는 아래와 같은 경우에만 <code class="highlighter-rouge">Self</code> 를 쓸 수 있습니다:</p>

<ul>
  <li>method 의 반환 타입으로 사용</li>
  <li>읽기 전용 subscript 의 반환 타입으로 사용</li>
  <li>읽기 전용 computed property 의 타입으로 사용</li>
  <li>method 의 내부</li>
</ul>

<p>예를 들면, 아래의 코드는 반환 타입이 <code class="highlighter-rouge">Self</code> 인 멤버 함수 <code class="highlighter-rouge">f</code> 를 나타낸 것입니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Superclass</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">f</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="k">Self</span> <span class="p">{</span> <span class="k">return</span> <span class="k">self</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">x</span> <span class="o">=</span> <span class="kt">Superclass</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="nf">f</span><span class="p">()))</span>

<span class="c1">// Prints "Superclass"</span>

<span class="kd">class</span> <span class="kt">Subclass</span><span class="p">:</span> <span class="kt">Superclass</span> <span class="p">{</span> <span class="p">}</span>

<span class="k">let</span> <span class="nv">y</span> <span class="o">=</span> <span class="kt">Subclass</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="n">y</span><span class="o">.</span><span class="nf">f</span><span class="p">()))</span>

<span class="c1">// Prints "Subclass"</span>

<span class="k">let</span> <span class="nv">z</span><span class="p">:</span> <span class="kt">Superclass</span> <span class="o">=</span> <span class="kt">Subclass</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="n">z</span><span class="o">.</span><span class="nf">f</span><span class="p">()))</span>

<span class="c1">// Prints "Subclass"</span>
</code></pre></div></div>

<p>위 예제의 마지막 부분은 <code class="highlighter-rouge">Self</code> 가 <code class="highlighter-rouge">z</code> 값의 실행 시간 타입인 <code class="highlighter-rouge">Subclass</code> 이며, 변수 자체의 컴파일 시간 타입인 <code class="highlighter-rouge">Superclass</code> 가 아님을 보여줍니다.</p>

<p>품어진 타입 (nested type) 선언 내에 있는 <code class="highlighter-rouge">Self</code> 는 가장 안쪽의 타입 (innermost) 선언이 만들어내는 타입을 가리킵니다.</p>

<p><code class="highlighter-rouge">Self</code> 타입은 은 스위프트 표준 라이브러리에 있는 <code class="highlighter-rouge">type(of:)</code> 함수와 같은 타입을 가리킵니다. 현재 타입의 멤버에 접근하기 위해 <code class="highlighter-rouge">Self.someStaticMember</code> 라고 쓰는 것은 <code class="highlighter-rouge">type(of: self).someStaticMember</code> 라고 쓰는 것과 같습니다.</p>

<h3 id="생각하기">생각하기</h3>

<p>위 내용의 마지막 부분에서 <code class="highlighter-rouge">Self</code> 타입과 <code class="highlighter-rouge">type(of:)</code> 함수의 결과가 같다는 것을 알 수 있습니다. 이대로라면 굳이 <code class="highlighter-rouge">Self</code> 가 있을 필요는 없어 보입니다.</p>

<p>하지만 <code class="highlighter-rouge">type(of:)</code> 함수는 특정 값의 동적 타입을 반환하는 함수로 컴파일 시간에 호출되는 것이 아닙니다.<sup id="fnref:type-of" role="doc-noteref"><a href="#fn:type-of" class="footnote">2</a></sup> 한편 <code class="highlighter-rouge">f()</code> 함수의 정의에서는 반환 값을 지정해 줄 필요가 있는데, 반환 값이 동적 시간에 결정되므로 <code class="highlighter-rouge">type(of:)</code> 함수를 호출할 수 없고, 그렇다고 컴파일 시간에 특정 타입으로 지정할 수도 없습니다.</p>

<p>이와 같이 컴파일 시간에 타입을 지정해야 하지만 컴파일 시간에 알 수는 없는 경우가 있습니다. 이 때, Meta 타입으로 <code class="highlighter-rouge">Self</code> 를 지정할 수 있습니다. 즉, <code class="highlighter-rouge">Self</code> 는 Generic Programming 에서 현재 타입을 매개변수처럼 전달해 줄 필요가 있을 때 사용할 수 있습니다.</p>

<h3 id="참고-자료">참고 자료</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:Self-Type" role="doc-endnote">
      <p>전체 원문은 <a href="https://docs.swift.org/swift-book/ReferenceManual/Types.html#ID610">Self Type</a>에서 확인할 수 있습니다. <a href="#fnref:Self-Type" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:type-of" role="doc-endnote">
      <p>더 자세한 내용은 Apple 개발 문서의 <a href="https://developer.apple.com/documentation/swift/2885064-type">type(of:)</a> 항목을 보도록 합니다. <a href="#fnref:type-of" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET