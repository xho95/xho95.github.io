I"�<blockquote>
  <p>Apple 에서 공개한 <a href="https://docs.swift.org/swift-book/">The Swift Programming Language (Swift 5.2)</a> 책의 <a href="https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html">Type Casting</a> 부분<sup id="fnref:Type-Casting" role="doc-noteref"><a href="#fn:Type-Casting" class="footnote">1</a></sup>을 번역하고 정리한 글입니다.</p>

  <p>현재 전체 중에서 번역 완료된 목록은 <a href="/swift/programming/language/grammar/2017/02/28/The-Swift-Programming-Language.html">Swift 5.2: Swift Programming Language (스위프트 프로그래밍 언어)</a> 에서 확인할 수 있습니다.</p>
</blockquote>

<h2 id="type-casting-타입-변환">Type Casting (타입 변환)</h2>

<p><em>타입 변환 (Type Casting)</em> 은 한 인스턴스의 타입을 검사하는 방법 또는, 그 인스턴스가 속한 ‘클래스 계층 (class hierarchy)’ 의 어딘가에 있는 다른 ‘상위 클래스’ 나 ‘하위 클래스’ 로 취급하는 방법을 말합니다.</p>

<p>스위프트의 ‘타입 변환’ 은 <code class="highlighter-rouge">is</code> 와 <code class="highlighter-rouge">as</code> 연산자로 구현됩니다. 이 두 연산자는 간단하면서도 이해하기 쉬운 방법으로 값의 타입을 검사하거나 값을 다른 타입으로 변환할 수 있도록 해 줍니다.</p>

<p>‘타입 변환’ 을 사용하면 그 타입이 프로토콜을 준수하고 있는지도 검사할 수 있으며, 이는 <a href="https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID283">Checking for Protocol Conformance (프로토콜을 준수하는지 검사하기)</a> 에서 설명하도록 합니다.</p>

<h3 id="defining-a-class-hierarchy-for-type-casting-타입-변환을-위한-클래스-계층-정의하기">Defining a Class Hierarchy for Type Casting (타입 변환을 위한 클래스 계층 정의하기)</h3>

<p>‘타입 변환 (type casting)’ 을 ‘클래스 및 하위 클래스들의 계층 (hierarchy of classes and subclasses)’ 과 같이 사용하면 특정한 클래스 인스턴스의 타입을 검사할 수 있으며 그 인스턴스를 같은 계층 내에 있는 다른 클래스로 ‘변환 (cast)’ 할 수도 있습니다. 아래에 있는 세 개의 코드 조각은 ‘클래스 계층’ 및 이 클래스들의 인스턴스를 가질 배열을 정의하는 것으로, 이 후 타입 변환 예제에서 사용할 것입니다.</p>

<p>첫 번째 코드 조각은 <code class="highlighter-rouge">MediaItem</code> 이라는 새로운 ‘기본 클래스 (base class)’<sup id="fnref:base-class" role="doc-noteref"><a href="#fn:base-class" class="footnote">2</a></sup> 를 정의합니다. 이 클래스는 ‘디지털 미디어 라이브러리 (digital media library)’ 에서 표시할 모든 종류의 항목을 위한 ‘기본 기능’ 을 제공합니다. 특히, <code class="highlighter-rouge">String</code> 타입의 <code class="highlighter-rouge">name</code> 속성과, <code class="highlighter-rouge">init name</code> 초기자를 선언하고 있습니다. (이는 모든 미디어 항목들이, 가령 모든 영화와 노래를 포함한 것들이, 이름을 가질 것이라고 가정하고 있는 것입니다.)</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">MediaItem</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>
  <span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>그 다음 코드 조각은 <code class="highlighter-rouge">MediaItem</code> 의 두 ‘하위 클래스’ 를 정의합니다. 첫 번째 하위 클래스인, <code class="highlighter-rouge">Movie</code> 는, 영화나 필름에 대한 추가적인 정보를 ‘캡슐화 (encapsulates)’ 합니다. 이는 <code class="highlighter-rouge">MediaItem</code> 기본 클래스 위에다가 <code class="highlighter-rouge">director</code> 속성을 추가하고, 그와 연관되는 초기자도 추가합니다. 두 번째 하위 클래스인, <code class="highlighter-rouge">Song</code> 은, 기본 클래스 위에 <code class="highlighter-rouge">artist</code> 속성과 초기자를 추가합니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Movie</span><span class="p">:</span> <span class="kt">MediaItem</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">director</span><span class="p">:</span> <span class="kt">String</span>
  <span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">director</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">director</span> <span class="o">=</span> <span class="n">director</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="n">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Song</span><span class="p">:</span> <span class="kt">MediaItem</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">artist</span><span class="p">:</span> <span class="kt">String</span>
  <span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">artist</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">artist</span> <span class="o">=</span> <span class="n">artist</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="n">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>마지막 코드 조각은 <code class="highlighter-rouge">library</code> 라는 상수 배열을 만들고, 여기에 두 개의 <code class="highlighter-rouge">Movie</code> 인스턴스와 세 개의 <code class="highlighter-rouge">Song</code> 인스턴스를 담습니다. <code class="highlighter-rouge">library</code> 배열에 대한 타입 추론은 이를 ‘배열 글자표현 (array literal)’ 의 내용으로 초기화하는 것으로 이루어 집니다. 스위프트의 ‘타입 검사기 (type checker)’ 는 <code class="highlighter-rouge">Movie</code> 와 <code class="highlighter-rouge">Song</code> 이 <code class="highlighter-rouge">MediaItem</code> 이라는 공통의 ‘상위 클래스’ 를 가지고 있음을 파악할 수 있으므로, <code class="highlighter-rouge">library</code> 배열의 타입으로 <code class="highlighter-rouge">[MediaItem]</code> 을 추론합니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">library</span> <span class="o">=</span> <span class="p">[</span>
  <span class="kt">Movie</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Casablanca"</span><span class="p">,</span> <span class="nv">director</span><span class="p">:</span> <span class="s">"Michael Curtiz"</span><span class="p">),</span>
  <span class="kt">Song</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Blue Suede Shoes"</span><span class="p">,</span> <span class="nv">director</span><span class="p">:</span> <span class="s">"Elvis Presley"</span><span class="p">),</span>
  <span class="kt">Movie</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Citizen Kane"</span><span class="p">,</span> <span class="nv">director</span><span class="p">:</span> <span class="s">"Orson Welles"</span><span class="p">),</span>
  <span class="kt">Song</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"The One And Only"</span><span class="p">,</span> <span class="nv">artist</span><span class="p">:</span> <span class="s">"Chesney Hawkes"</span><span class="p">),</span>
  <span class="kt">Song</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Never Gonna Give You Up"</span><span class="p">,</span> <span class="nv">artist</span><span class="p">:</span> <span class="s">"Rick Astley"</span><span class="p">),</span>  
<span class="p">]</span>
<span class="c1">// "library" 의 타입은 [MediaItem] 으로 추론됩니다.</span>
</code></pre></div></div>

<p>속을 들여다보면 <code class="highlighter-rouge">library</code> 에 저장된 항목들은 여전히 <code class="highlighter-rouge">Movie</code> 와 <code class="highlighter-rouge">Song</code> 인스턴스 입니다. 하지만, 이 배열의 내용에 ‘동작을 반복 적용시켜 (iterate over)’ 보면, 되돌려 받는 항목들은 타입이 <code class="highlighter-rouge">MediaItem</code> 이지, <code class="highlighter-rouge">Movie</code> 나 <code class="highlighter-rouge">Song</code> 이 아닙니다. 이들을 각자의 본래 타입에 맞게 작업하려면, 이들의 타입을 <em>검사 (check)</em> 하거나, 이들을 다른 타입으로 ‘<em>내림 변환 (downcast)</em>’ 해야 하며, 이제부터 그 방법을 설명할 것입니다.</p>

<h3 id="checking-type-타입-검사하기">Checking Type (타입 검사하기)</h3>

<p><em>타입 검사 연산자 (type check operator)</em> (<code class="highlighter-rouge">is</code>) 는 인스턴스가 어던 정해진 ‘하위 클래스’ 타입인지를 검사하는데 사용합니다. ‘타입 검사 연산자’ 는 그 인스턴스가 해당 하위 클래스 타입이면 <code class="highlighter-rouge">true</code> 를 반환하고 그렇지 않으면 <code class="highlighter-rouge">false</code> 를 반환합니다.</p>

<p>아래 예제는 두 개의 변수인, <code class="highlighter-rouge">movieCount</code> 와 <code class="highlighter-rouge">songCount</code> 를 정의하여, <code class="highlighter-rouge">library</code> 배열에 있는 <code class="highlighter-rouge">Movie</code> 와 <code class="highlighter-rouge">Song</code> 인스턴스의 개수를 헤아립니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">movieCount</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">var</span> <span class="nv">songCount</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">library</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">item</span> <span class="k">is</span> <span class="kt">Movie</span> <span class="p">{</span>
    <span class="n">movieCount</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">item</span> <span class="k">is</span> <span class="kt">Song</span> <span class="p">{</span>
    <span class="n">songCount</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nf">print</span><span class="p">(</span><span class="s">"Media library contains </span><span class="se">\(</span><span class="n">movieCount</span><span class="se">)</span><span class="s"> movies and </span><span class="se">\(</span><span class="n">songCount</span><span class="se">)</span><span class="s"> songs"</span><span class="p">)</span>
<span class="c1">// "Media library contains 2 movies and 3 songs" 를 출력합니다.</span>
</code></pre></div></div>

<p>이 예제는 <code class="highlighter-rouge">library</code> 배열의 모든 항목을 통과하며 동작을 반복합니다. 한 번 지나갈 때마다, <code class="highlighter-rouge">for-in</code> 반복문은 <code class="highlighter-rouge">item</code> 상수에 배열의 그 다음 <code class="highlighter-rouge">MediaItem</code> 을 설정합니다.</p>

<p><code class="highlighter-rouge">item is Movie</code> 는 현재 <code class="highlighter-rouge">MediaItem</code> 이 <code class="highlighter-rouge">Movie</code> 인스턴스면 <code class="highlighter-rouge">true</code> 를 반환하고 그렇지 않으면 <code class="highlighter-rouge">false</code> 를 반환합니다. 마찬가지로, <code class="highlighter-rouge">item is Song</code> 는 항목이 <code class="highlighter-rouge">Song</code> 인스턴스인지를 검사합니다. <code class="highlighter-rouge">for-in</code> 반복문이 끝나면, <code class="highlighter-rouge">movieCount</code> 와 <code class="highlighter-rouge">songCount</code> 의 값은 각 타입 별로 찾은 <code class="highlighter-rouge">MediaItem</code> 인스턴스의 개수를 가지게 됩니다.</p>

<h3 id="downcasting-내림-변환하기">Downcasting (내림 변환하기)</h3>

<p>정해진 클래스 타입의 상수나 변수는 그 속을 들여다보면 실제로는 ‘하위 클래스’ 의 인스턴스를 참조하고 있는 것일 수도 있습니다. 이런 경우에 해당된다면, <em>타입 변환 연산자 (type cast operator)</em> (<code class="highlighter-rouge">as?</code> 나 <code class="highlighter-rouge">as!</code>) 를 사용하여 그 하위 클래스 타입으로 ‘<em>내림 변환 (downcast)</em>’ 을 시도할 수 있습니다.</p>

<p>‘내림 변환 (downcasting)’ 은 실패할 수 있기 때문에, 타입 변환 연산자에는 두 개의 다른 양식이 필요합니다. 조건부 양식인, <code class="highlighter-rouge">as?</code> 는, 내림 변환을 시도할 타입의 ‘옵셔널 값 (optional value)’ 을 반환합니다. 강제 양식인, <code class="highlighter-rouge">as!</code> 는, ‘내림 변환 (downcast)’ 과 ‘강제 풀기 (force-unwraps)’ 시도를 한 번의 복합 동작으로 처리합니다.</p>

<p>타입 변환 연산자의 조건부 양식 (<code class="highlighter-rouge">as?</code>) 은 ‘내림 변환’ 이 성공할지 확신할 수 없을 때 사용합니다. 이 양식의 연산자는 항상 ‘옵셔널 값’ 을 반환하며, ‘내림 변환’ 이 불가능할 때는 <code class="highlighter-rouge">nil</code> 을 반환합니다. 이를 통해 ‘내림 변환’ 이 성공했는지를 검사할 수 있습니다.</p>

<p>타입 변환 연산자의 강제 양식 (<code class="highlighter-rouge">as!</code>) 은 ‘내림 변환’ 이 항상 성공한다고 확신할 수 있을 때 사용합니다. 이 양식의 연산자는, 잘못된 클래스 타입에 대해 ‘내림 변환’ 을 시도할 경우, ‘실행 시간에 에러 (runtime error)’ 를 발생시킵니다.</p>

<p>아래 예제는 <code class="highlighter-rouge">library</code> 의 각 <code class="highlighter-rouge">MediaItem</code> 마다 동작을 반복 적용시켜서, 각 항목에 대한 적절한 설명을 출력합니다. 이렇게 하려면, 각 항목에 접근할 때 <code class="highlighter-rouge">MediaItem</code> 으로 접근하기만 해서는 안되고, 진짜 <code class="highlighter-rouge">Movie</code> 나 <code class="highlighter-rouge">Song</code> 으로 접근하는 것이 필요합니다. 이것은 설명을 제대로 하려면 <code class="highlighter-rouge">Movie</code> 나 <code class="highlighter-rouge">Song</code> 에 있는 <code class="highlighter-rouge">director</code> 나 <code class="highlighter-rouge">artist</code> 속성에 접근하는 것이 필요하기 때문입니다.</p>

<p>이 예제에서, 배열의 각 항목은 <code class="highlighter-rouge">Movie</code> 일 수도, <code class="highlighter-rouge">Song</code> 일 수도 있습니다. 각 항목이 실제로는 어떤 클래스인지 미리 알 순 없으므로, 반복문에서 매번 ‘내림 변환’ 을 검사하려면 ‘타입 변환 연산자의 조건부 양식’ (<code class="highlighter-rouge">as?</code>) 을 사용하는 것이 적당합니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">library</span> <span class="p">{</span>
  <span class="k">if</span> <span class="k">let</span> <span class="nv">movie</span> <span class="o">=</span> <span class="n">item</span> <span class="k">as?</span> <span class="kt">Movie</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Movie: </span><span class="se">\(</span><span class="n">movie</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">dir</span><span class="o">.</span> <span class="p">\(</span><span class="n">movie</span><span class="o">.</span><span class="n">director</span><span class="p">)</span><span class="s">")
  } else if let song = item as? Song {
    print("</span><span class="kt">Song</span><span class="p">:</span> <span class="p">\(</span><span class="n">song</span><span class="o">.</span><span class="n">name</span><span class="p">),</span> <span class="n">by</span> <span class="p">\(</span><span class="n">song</span><span class="o">.</span><span class="n">artist</span><span class="p">)</span><span class="s">")
  }
}

// Movie: Casablanca, dir. Michael Curtiz
// Song: Blue Suede Shoes, by Elvis Presley
// Movie: Citizen Kane, dir. Orson Welles
// Song: The One And Only, by Chesney Hawkes
// Song: Never Gonna Give You Up, by Rick Astley
</span></code></pre></div></div>

<p>이 예제는 현재 <code class="highlighter-rouge">item</code> 을 <code class="highlighter-rouge">Movie</code> 로 ‘내림 변환’ 하는 것으로 시작합니다. <code class="highlighter-rouge">item</code> 은 <code class="highlighter-rouge">MediaItem</code> 인스턴스 이므로, 이것이 <code class="highlighter-rouge">Movie</code> <em>일 수 있다 (might)</em> 는 것은 가능한 것입니다; 마찬가지로, 이것은 <code class="highlighter-rouge">Song</code> 일 수 있다는 것도 가능한 것이며, 심지어 기본 <code class="highlighter-rouge">MediaItem</code> 일 수 있다는 것도 가능한 것입니다. 이러한 불확실성 때문에, <code class="highlighter-rouge">as?</code> 양식의 타입 변환 연산자는 하위 클래스 타입으로 내림 변환을 시도힌 후 <em>옵셔널 (optional)</em> 값을 반환합니다. <code class="highlighter-rouge">item as? Movie</code> 의 결과는 타입이 <code class="highlighter-rouge">Movie?</code>, 또는 “옵셔널 <code class="highlighter-rouge">Movie</code>” 입니다.</p>

<p><code class="highlighter-rouge">Movie</code> 로 ‘내림 변환’ 하는 것을 ‘라이브러리’ 배열의 <code class="highlighter-rouge">Song</code> 인스턴스에 적용하면 실패할 것입니다. 이에 대처하기 위해, 위의 예제에서는 ‘옵셔널 바인딩 (optional binding)’ 을 사용하여 옵셔널 <code class="highlighter-rouge">Movie</code> 가 실제로 값을 가지고 있는지를 검사합니다. (이는 곧 ‘내림 변환’ 이 성공했는지를 알아 낸다는 것과 같습니다.) 이 ‘옵셔널 바인딩’ 은 “<code class="highlighter-rouge">if let movie = item as? Movie</code>” 라고 작성되었는데, 이는 다음과 같이 이해할 수 있습니다:</p>

<p>“<code class="highlighter-rouge">item</code> 을 <code class="highlighter-rouge">Movie</code> 인 것으로 접근하기 바랍니다. 이것이 성공했으면, 반환된 옵셔널 <code class="highlighter-rouge">Movie</code> 에 저장된 값을 <code class="highlighter-rouge">movie</code> 라는 새로운 임시 상수에 설정하기 바랍니다.”</p>

<p>‘내림 변환’ 이 성공하면, <code class="highlighter-rouge">movie</code> 속성으로 <code class="highlighter-rouge">Movie</code> 인스턴스의 설명을 출력할 수 있게 되며, 이 때 <code class="highlighter-rouge">director</code> 의 이름도 포함하게 됩니다. 이와 비슷한 원리를 사용하면 <code class="highlighter-rouge">Song</code> 인스턴스를 검사하여, ‘라이브러리’ 에서 발견한 모든 <code class="highlighter-rouge">Song</code> 에 대한 적절한 설명을 (<code class="highlighter-rouge">artist</code> 이름도 포함하여) 출력할 수 있습니다.</p>

<blockquote>
  <p>‘변환 (casting)’ 은 실제로 인스턴스를 수정하거나 그 값을 바꾸는 것이 아닙니다. 실제 인스턴스는 그대로 남아 있습니다; 단지 어떤 인스턴스를 변환한 타입으로 취급하고 접근할 수 있게 하는 것일 뿐입니다.</p>
</blockquote>

<h3 id="type-casting-for-any-and-anyobject-any-와-anyobject-에-대한-타입-변환">Type Casting for Any and AnyObject (‘Any’ 와 ‘AnyObject’ 에 대한 타입 변환)</h3>

<p>스위프트는 ‘지정되지 않은 타입 (nonspecific type)’ 을 다루기 위한 두 개의 특별한 타입을 제공합니다.</p>

<ul>
  <li><code class="highlighter-rouge">Any</code> 는 어떤 타입에 대한 인스턴스라도 전부 나타낼 수 있으며, 여기에는 함수 타입도 포함됩니다.</li>
  <li><code class="highlighter-rouge">AnyObject</code> 는 어떤 클래스 타입에 대한 인스턴스라도 나타낼 수 있습니다.</li>
</ul>

<p><code class="highlighter-rouge">Any</code> 와 <code class="highlighter-rouge">AnyObject</code> 는 이들이 제공하는 동작과 기능이 명시적으로 필요할 때만 사용하기 바랍니다. 코드에서 작업하는 타입을 예상할 수 있는 경우라면 항상 이를 지정하는 것이 더 좋습니다.</p>

<p>다음은 <code class="highlighter-rouge">Any</code> 를 사용하여 서로 다른 타입을 섞어서 작업하는 예제이며, 여기에는 ‘함수 타입’ 과 ‘비-클래스 타입’ 도 포함됩니다. 이 예제는 <code class="highlighter-rouge">Any</code> 타입의 값을 저장할 수 있는, <code class="highlighter-rouge">things</code> 라는 배열을 만듭니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">things</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Any</span><span class="p">]()</span>

<span class="n">things</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">things</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="mf">0.0</span><span class="p">)</span>
<span class="n">things</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="n">things</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="mf">3.14159</span><span class="p">)</span>
<span class="n">things</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="s">"hello"</span><span class="p">)</span>
<span class="n">things</span><span class="o">.</span><span class="nf">append</span><span class="p">((</span><span class="mf">3.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">))</span>
<span class="n">things</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="kt">Movie</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Ghostbusters"</span><span class="p">,</span> <span class="nv">director</span><span class="p">:</span> <span class="s">"Ivan Reitman"</span><span class="p">))</span>
<span class="n">things</span><span class="o">.</span><span class="nf">append</span><span class="p">({</span> <span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="k">in</span> <span class="s">"Hello, </span><span class="se">\(</span><span class="n">name</span><span class="se">)</span><span class="s">"</span> <span class="p">})</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">things</code> 배열이 가지고 있는 것들은 두 개의 <code class="highlighter-rouge">Int</code> 값, 두 개의 <code class="highlighter-rouge">Double</code> 값, 한 개의 <code class="highlighter-rouge">String</code> 값, 한 개의 <code class="highlighter-rouge">(Double, Double)</code> 타입인 튜플, “Ghostbusters” 라는 영화, 그리고 한 개의 클로저로 <code class="highlighter-rouge">String</code> 값을 받아서 또다른 <code class="highlighter-rouge">String</code> 값을 반환하는 것이 있습니다.</p>

<p><code class="highlighter-rouge">Any</code> 나 <code class="highlighter-rouge">AnyObject</code> 타입만 알고 있는 상태에서 상수나 변수의 ‘지정된 타입 (specific type)’ 을 찾고 싶으면, <code class="highlighter-rouge">switch</code> 문의 ‘경우 값 (cases)’ 에 <code class="highlighter-rouge">is</code> 또는 <code class="highlighter-rouge">as</code> ‘pattern (유형)’ 을 사용하면 됩니다. 아래 예제는 <code class="highlighter-rouge">things</code> 배열에 있는 항목들에 동작을 반복 적용시키는데 이 때 <code class="highlighter-rouge">switch</code> 문으로 각 항목의 타입을 조회합니다. <code class="highlighter-rouge">switch</code> 문의 여러 개의 ‘경우 값 (cases)’ 들은 해당하는 값을 지정된 타입의 상수에 ‘연결시켜 (bind)’ 그 값을 출력할 수 있도록 합니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">thing</span> <span class="k">in</span> <span class="n">things</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">thing</span> <span class="p">{</span>
  <span class="k">case</span> <span class="mi">0</span> <span class="k">as</span> <span class="kt">Int</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"zero as an Int"</span><span class="p">)</span>
  <span class="k">case</span> <span class="mi">0</span> <span class="k">as</span> <span class="kt">Double</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"zero as a Double"</span><span class="p">)</span>
  <span class="k">case</span> <span class="k">let</span> <span class="nv">someInt</span> <span class="k">as</span> <span class="kt">Int</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"and integer value of </span><span class="se">\(</span><span class="n">someInt</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
  <span class="k">case</span> <span class="k">let</span> <span class="nv">someDouble</span> <span class="k">as</span> <span class="kt">Double</span> <span class="k">where</span> <span class="n">someDouble</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"a positive double value of </span><span class="se">\(</span><span class="n">someDouble</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
  <span class="k">case</span> <span class="k">is</span> <span class="kt">Double</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"some other double value that I don't want to print"</span><span class="p">)</span>
  <span class="k">case</span> <span class="k">let</span> <span class="nv">someString</span> <span class="k">as</span> <span class="kt">String</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"a string value of </span><span class="se">\(</span><span class="n">someString</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
  <span class="k">case</span> <span class="k">let</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">)</span> <span class="nf">as</span> <span class="p">(</span><span class="kt">Double</span><span class="p">,</span> <span class="kt">Double</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"an (x, y) point at </span><span class="se">\(</span><span class="n">x</span><span class="se">)</span><span class="s">, </span><span class="se">\(</span><span class="n">y</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
  <span class="k">case</span> <span class="k">let</span> <span class="nv">movie</span> <span class="k">as</span> <span class="kt">Movie</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"a movie called </span><span class="se">\(</span><span class="n">movie</span><span class="o">.</span><span class="n">name</span><span class="se">)</span><span class="s">, dir. </span><span class="se">\(</span><span class="n">movie</span><span class="o">.</span><span class="n">director</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
  <span class="k">case</span> <span class="k">let</span> <span class="nv">stringConverter</span> <span class="nf">as</span> <span class="p">(</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">stringConverter</span><span class="p">(</span><span class="s">"Michael"</span><span class="p">))</span>
  <span class="k">default</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"something else"</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// zero as an Int</span>
<span class="c1">// zero as a Double</span>
<span class="c1">// an integer value of 42</span>
<span class="c1">// a positive double value of 3.14159</span>
<span class="c1">// a string value of "hello"</span>
<span class="c1">// an (x, y) point at 3.0, 5.0</span>
<span class="c1">// a movie called Ghostbusters, dir. Ivan Reitman</span>
<span class="c1">// Hello, Michael</span>
</code></pre></div></div>

<blockquote>
  <p><code class="highlighter-rouge">Any</code> 타입은 어떤 타입의 값이라도 나타낼 수 있는 것으로, 여기에는 ‘옵셔널 타입’ 도 포함됩니다. <code class="highlighter-rouge">Any</code> 타입의 값이 필요한 곳에서 ‘옵셔널 값’ 을 사용하면 스위프트가 경고를 띄웁니다. 정말로 ‘옵셔널 값’ 을 <code class="highlighter-rouge">Any</code> 값의 형태로 사용해야하는 경우라면, <code class="highlighter-rouge">as</code> 연산자를 사용하여, 아래에 보인 것처럼, 그 ‘옵셔널’ 을 명시적으로 <code class="highlighter-rouge">Any</code> 로 ‘변환 (cast)’ 해야 합니다.</p>
</blockquote>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">let</span> <span class="nv">optionalNumber</span><span class="p">:</span> <span class="kt">Int</span><span class="p">?</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">things</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">optionalNumber</span><span class="p">)</span>        <span class="c1">// Warning</span>
<span class="n">things</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">optionalNumber</span> <span class="k">as</span> <span class="kt">Any</span><span class="p">)</span> <span class="c1">// No warning</span>
</code></pre></div></div>

<h3 id="참고-자료">참고 자료</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:Type-Casting" role="doc-endnote">
      <p>이 글에 대한 원문은 <a href="https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html">Type Casting</a> 에서 확인할 수 있습니다. <a href="#fnref:Type-Casting" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:base-class" role="doc-endnote">
      <p>스위프트에서 ‘기본 클래스 (base class)’ 라는 것은 ‘상위 클래스 (superclass)’ 를 가지지 않는 클래스를 의미합니다. ‘기본 클래스’ 에 대한 더 자세한 설명은 <a href="/swift/language/grammar/inheritance/2020/03/31/Inheritance.html">Inheritance (상속)</a> 을 보도록 합니다. <a href="#fnref:base-class" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET