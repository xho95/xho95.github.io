I"�<blockquote>
  <p>Apple 에서 공개한 <a href="https://docs.swift.org/swift-book/">The Swift Programming Language (Swift 5.2)</a> 책의 <a href="https://docs.swift.org/swift-book/LanguageGuide/Methods.html">Methods</a> 부분<sup id="fnref:Methods" role="doc-noteref"><a href="#fn:Methods" class="footnote">1</a></sup>을 번역하고 정리한 글입니다.</p>

  <p>현재 전체 중에서 번역 완료된 목록은 <a href="/swift/programming/language/grammar/2017/02/28/The-Swift-Programming-Language.html">Swift 5.2: Swift Programming Language (스위프트 프로그래밍 언어)</a> 에서 확인할 수 있습니다.</p>
</blockquote>

<h2 id="methods-메소드">Methods (메소드)</h2>

<p><em>‘메소드 (methods)</em> 는 특정한 타입에 관련되어 있는 함수<sup id="fnref:method-and-function" role="doc-noteref"><a href="#fn:method-and-function" class="footnote">2</a></sup>를 말합니다. 클래스, 구조체, 그리고 열거체는 모두 ‘인스턴스 메소드 (instance methods)’ 를 정의할 수 있는데, 이는 지정된 임무와 기능을 ‘캡슐화 (encapsulate)’ 해서 주어진 타입의 인스턴스에서 사용할 수 있도록 합니다. 클래스, 구조체, 그리고 열거체는 ‘타입 메소드 (type methods)’ 도 정의할 수 있는데, 이는 타입 그 자체와 관련되어 있습니다. ‘타입 메소드’ 는 오브젝티브-C 에 있는 ‘클래스 메소드 (class methods)’ 와 비슷합니다.</p>

<p>스위프트에서는 구조체와 열거체도 메소드를 정의할 수 있다는 사실이 C 언어 및 오브젝티브-C 언어와의 주요한 차이점입니다.<sup id="fnref:c-structure" role="doc-noteref"><a href="#fn:c-structure" class="footnote">3</a></sup> 오브젝티브-C 에서는, 클래스 만이 메소드를 정의할 수 있는 유일한 타입입니다. 스위프트에서는, 클래스, 구조체, 또는 열거체 중 어떤 것으로 정의할 지 선택할 수 있으며, 그러면서도 여전히 생성한 타입에 대해 메소드를 정의할 수 있는 유연함을 가지게 됩니다.</p>

<h3 id="instance-methods-인스턴스-메소드">Instance Methods (인스턴스 메소드)</h3>

<p><em>‘인스턴스 메소드 (instance methods)’</em> 는 특정한 클래스, 구조체, 또는 열거체의 인스턴스에 속해 있는 함수를 말합니다. 이는, 인스턴스 속성에 접근하고 수정하는 방법을 제공하거나, 또는 인스턴스의 목적과 관계가 있는 기능을 제공함으로써, 그 인스턴스의 기능을 지원합니다. ‘인스턴스 메소드’ 는 ‘함수’ 와 정확하게 똑같은 구문 표현을 가지는데, 함수에 대해서는 <a href="https://docs.swift.org/swift-book/LanguageGuide/Functions.html">Functions (함수)</a> 에서 설명하도록 합니다.</p>

<p>인스턴스 메소드는 자신이 속해 있는 타입의 시작 및 닫는 중괄호 안에 작성합니다. 인스턴스 메소드는 암시적으로 해당 타입의 모든 다른 인스턴스 메소드와 속성에 접근할 수 있습니다. 인스턴스 메소드는 자신이 속해 있는 타입의 지정된 인스턴스에서만 호출할 수 있습니다. 존재하는 인스턴스가 없다면 독립적으로 호출할 수 없습니다.</p>

<p>다음 예제는, 동작 발생 횟수를 계산하는데 사용할 수 있는, 간단한 <code class="highlighter-rouge">Counter</code> 클래스를 정의합니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Counter</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">count</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="kd">func</span> <span class="nf">increment</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="p">}</span>
  <span class="kd">func</span> <span class="nf">increment</span><span class="p">(</span><span class="n">by</span> <span class="nv">amount</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">count</span> <span class="o">+=</span> <span class="n">amount</span>
  <span class="p">}</span>
  <span class="kd">func</span> <span class="nf">reset</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">Counter</code> 클래스는 세 개의 ‘인스턴스 메소드’ 를 정의합니다:</p>

<ul>
  <li><code class="highlighter-rouge">increment()</code> 는 ‘카운터 (counter)’ 를 <code class="highlighter-rouge">1</code> 만큼 증가시킵니다.</li>
  <li><code class="highlighter-rouge">increment(by : Int)</code> 는 ‘카운터’ 를 지정된 정수 양 만큼 증가시킵니다.</li>
  <li><code class="highlighter-rouge">reset()</code> 은 ‘카운터’ 를 <code class="highlighter-rouge">0</code> 으로 재설정합니다.</li>
</ul>

<p><code class="highlighter-rouge">Counter</code> 클래스는, 현재 카운터 값을 계속 추적하기 위해, <code class="highlighter-rouge">count</code> 라는 변수 속성도 선언합니다.</p>

<p>인스턴스 메소드를 호출하는 방법은 속성과 같이 ‘점 구문 표현 (dot syntax)’ 을 사용하면 됩니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">counter</span> <span class="o">=</span> <span class="kt">Counter</span><span class="p">()</span>
<span class="c1">// 카운터의 초기 값은 0 입니다.</span>
<span class="n">counter</span><span class="o">.</span><span class="nf">increment</span><span class="p">()</span>
<span class="c1">// 카운터의 값은 이제 1 입니다.</span>
<span class="n">counter</span><span class="o">.</span><span class="nf">increment</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="mi">5</span><span class="p">)</span>
<span class="c1">// 카운터의 값은 이제 6 입니다.</span>
<span class="n">counter</span><span class="o">.</span><span class="nf">reset</span><span class="p">()</span>
<span class="c1">// 카운터의 값은 이제 0 입니다.</span>
</code></pre></div></div>

<p>함수의 매개 변수는, <a href="https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID166">Function Argument Labels and Parameter Names (함수 인자 이름표와 매개 변수 이름)</a> 에서 설명한 것 처럼, (함수 본문 내에서 사용되는) 이름과 (함수를 호출할 때 사용되는) ‘인자 이름표 (argument label)’ 을 모두 가질 수 있습니다. 메소드의 매개 변수도 이와 똑같은데, 이는 메소드 역시 타입과 관련이 있을 뿐 함수이기 때문입니다.</p>

<h4 id="the-self-property-self-속성">The self Property (‘self’ 속성)</h4>

<p>타입의 모든 인스턴스는, 인스턴스 그 자신과 정확하게 동일한, <code class="highlighter-rouge">self</code> 라는 ‘암시적인 속성 (implicit property)’ 을 가지고 있습니다.<sup id="fnref:implicit-property" role="doc-noteref"><a href="#fn:implicit-property" class="footnote">4</a></sup> <code class="highlighter-rouge">self</code> 속성을 사용하면 자신의 인스턴스 메소드 범위 내에서 현재 인스턴스를 참조할 수 있습니다.</p>

<p>위 예제의 <code class="highlighter-rouge">increment()</code> 메소드는 다음과 같이 작성할 수도 있습니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">increment</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">self</span><span class="o">.</span><span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></div></div>

<p>실제로, 코드에서 <code class="highlighter-rouge">self</code> 쓸 일은 자주 없습니다. <code class="highlighter-rouge">self</code> 를 명시하지 않은 채, 메소드 내에서 알려진 속성 이름이나 메소드 이름을 사용하면 그 때마다 스위프트는 현재 인스턴스의 속성이나 메소드를 참조한다고 가정합니다. 이러한 가정은 <code class="highlighter-rouge">Counter</code> 에 있는 세 개의 인스턴스 메소드에서 (<code class="highlighter-rouge">self.count</code> 가 아닌) <code class="highlighter-rouge">count</code> 를 사용한 것으로 입증된 바 있습니다.</p>

<p>이 규칙에서의 주된 예외는 인스턴스 메소드의 매개 변수 이름이 해당 인스턴스에 있는 속성과 같은 이름을 가지게 될 때 발생합니다. 이런 상황에서는, 매개 변수 이름이 우선시 되며, 속성을 참조하려면 더 적당한 방법이 필요해 집니다. <code class="highlighter-rouge">self</code> 속성을 사용하여 매개 변수 이름과 속성 이름을 구별할 수 있습니다.</p>

<p>다음은, <code class="highlighter-rouge">self</code> 를 사용하여 <code class="highlighter-rouge">x</code> 라는 메소드 매개 변수와 역시 <code class="highlighter-rouge">x</code> 인 인스턴스 속성 사이의 모호함을 없앱니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">Point</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">x</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span>
  <span class="kd">func</span> <span class="nf">isToTheRightOf</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="kt">Double</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">self</span><span class="o">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">x</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">somePoint</span> <span class="o">=</span> <span class="kt">Point</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mf">4.0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mf">5.0</span><span class="p">)</span>
<span class="k">if</span> <span class="n">somePoint</span><span class="o">.</span><span class="nf">isToTheRightOf</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">print</span><span class="p">(</span><span class="s">"This point is to the right of the line where x == 1.0"</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// "This point is to the right of the line where x == 1.0" 를 출력합니다.</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">self</code> 접두사가 없다면, 스위프트는 두 <code class="highlighter-rouge">x</code> 모두 <code class="highlighter-rouge">x</code> 라는 메소드 매개 변수를 참조한다고 가정하게 될 겁니다.</p>

<h4 id="modifying-value-types-from-within-instance-methods-인스턴스-메소드에서-값-타입-수정하기">Modifying Value Types from Within Instance Methods (인스턴스 메소드에서 값 타입 수정하기)</h4>

<p>구조체와 열거체는 <em>값 타입 (value types)</em> 입니다. 기본적으로, 값 타입의 속성은 자신의 인스턴스 메소드에서 수정할 수 없습니다.</p>

<p>하지만, 특정 메소드에서 구조체나 열거체의 속성을 수정할 필요가 있을 경우, 그 메소드가 <em>mutating (변경)</em> 동작을 한다고 선택할 수 있습니다. 그러면 그 메소드는 이제 메소드에서 속성을 변경할 (즉, 바꿀) 수 있으며, 변경된 내용은 어떤 것이든 메소드가 끝날 때 원래 구조체에 기록 됩니다. 이 메소드는 암시적인 <code class="highlighter-rouge">self</code> 속성에 완전히 새로운 인스턴스를 할당할 수도 있으며, 이 새 인스턴스는 메소드가 끝날 때 기존 것을 대체합니다.</p>

<p>이런 동작을 선택하려면 메소드에 있는 <code class="highlighter-rouge">func</code> 키워드 앞에 <code class="highlighter-rouge">mutating</code> 키워드를 써주면 됩니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">Point</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">x</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span>
  <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">moveBy</span><span class="p">(</span><span class="n">x</span> <span class="nv">deltaX</span><span class="p">:</span> <span class="kt">Double</span><span class="p">,</span> <span class="nv">deltaY</span><span class="p">:</span> <span class="kt">Double</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">x</span> <span class="o">+=</span> <span class="n">deltaX</span>
    <span class="n">y</span> <span class="o">+=</span> <span class="n">deltaY</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="k">var</span> <span class="nv">somePoint</span> <span class="o">=</span> <span class="kt">Point</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)</span>
<span class="n">somePoint</span><span class="o">.</span><span class="nf">moveBy</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mf">2.0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mf">3.0</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"The point is now at (</span><span class="se">\(</span><span class="n">somePoint</span><span class="o">.</span><span class="n">x</span><span class="se">)</span><span class="s">, </span><span class="se">\(</span><span class="n">somePoint</span><span class="o">.</span><span class="n">y</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="c1">// "The point is now at (3.0, 4.0)" 를 출력합니다.</span>
</code></pre></div></div>

<p>위의 <code class="highlighter-rouge">Point</code> 구조체는, <code class="highlighter-rouge">Point</code> 인스턴스를 정해진 양만큼 이동시키는, 변경 메소드인 <code class="highlighter-rouge">moveBy(x:y:)</code> 메소드를 정의합니다. 새로운 ‘위치 (point)’ 를 반환하는 대신, 이 메소드는 호출된 위치를 실제로 수정합니다. <code class="highlighter-rouge">mutating</code> 키워드를 정의에 추가해서 속성을 수정할 수 있게 해 줍니다.</p>

<p>구조체 타입의 상수에 대해서는 변경 메소드를 호출할 수 없다는 것에 주목하기 바랍니다. 왜냐면 그 속성을 바꿀 수 없기 때문으로, 설령 그것이 변수 속성이라도 그렇습니다. 이는 <a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID256">Stored Properties of Constant Structure Instances (상수 구조체 인스턴스의 저장 속성)</a> 에서 설명합니다.</p>

<h4 id="assigning-to-self-within-a-mutating-method-변경-메소드에서-self-에-할당하기">Assigning to self Within a Mutating Method (변경 메소드에서 ‘self’ 에 할당하기)</h4>

<p>변경 메소드는 암시적인 속성인 <code class="highlighter-rouge">self</code> 에 완전히 새로운 인스턴스를 할당할 수 있습니다. 위에 있는 <code class="highlighter-rouge">Point</code> 예제는 다음과 같은 다른 방법으로도 작성할 수 있습니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">Point</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">x</span> <span class="o">=</span> <span class="mf">0.0</span> <span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span>
  <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">moveBy</span><span class="p">(</span><span class="n">x</span> <span class="nv">deltaX</span><span class="p">:</span> <span class="kt">Double</span><span class="p">,</span> <span class="n">y</span> <span class="nv">deltaY</span><span class="p">:</span> <span class="kt">Double</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">self</span> <span class="o">=</span> <span class="kt">Point</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">deltaX</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">y</span> <span class="o">+</span> <span class="n">deltaY</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이 버전의 <code class="highlighter-rouge">moveBy(x:y:)</code> 변경 메소드는 <code class="highlighter-rouge">x</code>, <code class="highlighter-rouge">y</code> 값을 목표 위치로 설정한 새로운 구조체를 생성합니다. 이 대체 버전의 메소드를 호출한 최종 결과는 이전 버전을 호출한 것과 정확하게 같습니다.</p>

<p>열거체의 변경 메소드는 암시적 매개 변수<sup id="fnref:implicit-parameter" role="doc-noteref"><a href="#fn:implicit-parameter" class="footnote">5</a></sup>인 <code class="highlighter-rouge">self</code> 에 동일한 열거체에 있는 다른 ‘경우 값 (case)’ 를 설정할 수 있습니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">TriStateSwitch</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">off</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span>
  <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">next</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="k">self</span> <span class="p">{</span>
    <span class="k">case</span> <span class="o">.</span><span class="nv">off</span><span class="p">:</span>
      <span class="k">self</span> <span class="o">=</span> <span class="o">.</span><span class="n">low</span>
    <span class="k">case</span> <span class="o">.</span><span class="nv">low</span><span class="p">:</span>
      <span class="k">self</span> <span class="o">=</span> <span class="o">.</span><span class="n">high</span>
    <span class="k">case</span> <span class="o">.</span><span class="nv">high</span><span class="p">:</span>
      <span class="k">self</span> <span class="o">=</span> <span class="o">.</span><span class="n">off</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="k">var</span> <span class="nv">ovenLight</span> <span class="o">=</span> <span class="kt">TriStateSwitch</span><span class="o">.</span><span class="n">low</span>
<span class="n">ovenLight</span><span class="o">.</span><span class="nf">next</span><span class="p">()</span>
<span class="c1">// ovenLight 는 이제 .hight 와 같습니다.</span>
<span class="n">ovenLight</span><span class="o">.</span><span class="nf">next</span><span class="p">()</span>
<span class="c1">// ovenLight 는 이제 .off 와 같습니다.</span>
</code></pre></div></div>

<p>이 예제는 ‘3-상 스위치 (three-state switch)’ 를 위한 열거체를 정의합니다. 이 스위치는 <code class="highlighter-rouge">next()</code> 메소드를 호출할 때마다 세 전원 상태 (<code class="highlighter-rouge">off (꺼짐)</code>, <code class="highlighter-rouge">low (낮음)</code>, 및 <code class="highlighter-rouge">high (높음)</code>) 사이를 순환합니다.</p>

<h3 id="type-methods-타입-메소드">Type Methods (타입 메소드)</h3>

<p>지금까지 설명한, 인스턴스 메소드는, 특정한 타입의 인스턴스에서 호출하는 메소드입니다. 타입 그 자체에서 호출하는 메소드도 정의할 수 있는데, 이런 종류의 메소드를 <em>타입 메소드 (type methods)</em> 라고 합니다. 메소드의 <code class="highlighter-rouge">func</code> 키워드 앞에 <code class="highlighter-rouge">static</code> 키워드를 작성하여 타입 메소드를 지정합니다. 클래스라면 이것 대신 <code class="highlighter-rouge">class</code> 키워드를 사용하여, 그 메소드의 상위 클래스 구현을 하위 클래스에서 재정의할 수 있도록 만들 수도 있습니다.
</p>
<blockquote>
  <p>오브젝티브-C 에서는, 오브젝티브-C ‘클래스’ 에 대해서만 타입-수준 메소드를 정의할 수 있습니다. 스위프트에서는, 모든 클래스, 구조체, 그리고 열거체에 대해서도 타입-수준 메소드를 정의할 수 있습니다. 각 타입 메소드는 명시적으로 영역의 범위가 그것이 지원하는 타입으로 정해집니다.</p>
</blockquote>

<p>타입 메소드는 ‘점 구문 표현 (dot syntax)’ 를 사용하여 호출하며, 이는 인스턴스 메소드와 같습니다. 하지만, 타입 메소드는 타입에서 호출하는 것으로, 그 타입의 인스턴스에서 호출하는 것이 아닙니다. 다음은 <code class="highlighter-rouge">SomeClass</code> 라는 클래스에서 타입 메소드를 호출하는 방법을 보여줍니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">SomeClass</span> <span class="p">{</span>
  <span class="kd">class</span> <span class="kd">func</span> <span class="nf">someTypeMethod</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 여기서 타입 메소드를 구현합니다.</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kt">SomeClass</span><span class="o">.</span><span class="nf">someTypeMethod</span><span class="p">()</span>
</code></pre></div></div>

<p>타입 메소드의 본문에서, 암시적인 속성 <code class="highlighter-rouge">self</code> 는 그 타입의 인스턴스가 아니라, 타입 그 자체를 참조합니다. 즉 <code class="highlighter-rouge">self</code> 를 사용하면 ‘타입 속성’ 과 ‘타입 메소드 매개 변수’ 사이의 모호함을 없앨 수 있으며, 이는 앞서 인스턴스 속성과 인스턴스 메소드 매개 변수에서 했던 것과 같습니다.</p>

<p>좀 더 일반적으로, 타입 메소드의 본문에서 사용한 ‘규명되지 않은 (unqualified)’<sup id="fnref:unqualified" role="doc-noteref"><a href="#fn:unqualified" class="footnote">6</a></sup> 메소드나 ‘규명되지 않은’ 속성 이름은 어떤 것들도 다른 타입-수준 메소드와 속성을 참조할 것입니다. 타입 메소드는 다른 타입 메소드를 그 메소드의 이름으로 호출할 수 있는데, 이 때 타입 이름을 접두사로 붙일 필요는 없습니다. 이와 비슷하게, 구조체와 열거체의 타입 메소드는 타입 이름 접두사 없이 타입 속성의 이름만 사용하여 타입 속성에 접근할 수 있습니다.</p>

<p>아래 예제는 <code class="highlighter-rouge">LevelTracker</code> 라는 구조체를 정의하여, 게임의 레벨별 또는 단계별로 참여자의 진행 상황을 추적합니다. ‘단일-참여자 게임 (single-player game)’ 도, 단일 기기에서 ‘다중-참여자 (multi-player)’ 에 대한 정보를 저장할 수 있습니다.</p>

<p>게임을 처음할 때는 (첫 레벨을 제외한) 모든 게임의 레벨이 잠겨 있게 됩니다. 한 참여자가 레벨을 완료할 때마다, 해당 레벨은 기기의 모든 참여자에게 잠금 해제됩니다. <code class="highlighter-rouge">LevelTracker</code> 구조체는 타입 속성과 타입 메소드를 사용하여 어떤 게임 레벨이 잠금 해제되었는지 추적합니다. 또 개별 참여자의 현재 레벨도 추적합니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">LevelTracker</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="k">var</span> <span class="nv">highestUnlockedLevel</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="k">var</span> <span class="nv">currentLevel</span> <span class="o">=</span> <span class="mi">1</span>

  <span class="kd">static</span> <span class="kd">func</span> <span class="nf">unlock</span><span class="p">(</span><span class="n">_</span> <span class="nv">level</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">level</span> <span class="o">&gt;</span> <span class="n">highestUnlockedLevel</span> <span class="p">{</span> <span class="n">highestUnlockedLevel</span> <span class="o">=</span> <span class="n">level</span> <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">static</span> <span class="kd">func</span> <span class="nf">isUnlocked</span><span class="p">(</span><span class="n">_</span> <span class="nv">level</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">level</span> <span class="o">&lt;=</span> <span class="n">highestUnlockedLevel</span>
  <span class="p">}</span>

  <span class="kd">@discardableResult</span>
  <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">advance</span><span class="p">(</span><span class="n">to</span> <span class="nv">level</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">if</span> <span class="kt">LevelTracker</span><span class="o">.</span><span class="nf">isUnlocked</span><span class="p">(</span><span class="n">level</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">currentLevel</span> <span class="o">=</span> <span class="n">level</span>
      <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">LevelTracker</code> 구조체는 어떤 참여자에 의해 잠금 해제된 가장 높은 레벨을 추적합니다. 이 값은 <code class="highlighter-rouge">highestUnlockedLevel</code> 이라는 타입 속성에 저장됩니다.</p>

<p><code class="highlighter-rouge">LevelTracker</code> 는 <code class="highlighter-rouge">highUnlockedLevel</code> 속성과 작업하는 두 개의 타입 함수도 정의합니다.[^static-type-fuction] 첫 번째는 <code class="highlighter-rouge">unlock(_:)</code> 이라는 타입 함수로, 새로운 레벨이 잠금 해제될 때마다 <code class="highlighter-rouge">highestUnlockedLevel</code> 의 값을 갱신합니다. 두 번째는 <code class="highlighter-rouge">isUnlocked(_:)</code> 이라는 ‘편의 (convenience)’ 타입 함수로, 특정 레벨 번호가 이미 잠금 해제되었다면 <code class="highlighter-rouge">true</code> 를 반환합니다. (이러한 타입 메소드는 <code class="highlighter-rouge">LevelTracker.highestUnlockedLevel</code> 처럼 작성할 필요없이 <code class="highlighter-rouge">highestUnlockedLevel</code> 타입 속성에 접근할 수 있음을 기억하기 바랍니다.)</p>

<p>타입 속성과 타입 메소드에 더하여, <code class="highlighter-rouge">LevelTracker</code> 는 개별 참여자의 게임 진행 상황도 추적합니다. 이 때 <code class="highlighter-rouge">currentLevel</code> 이라는 인스턴스 속성으로 참여자의 현재 플레이 레벨을 추적합니다.</p>

<p><code class="highlighter-rouge">currentLevel</code> 속성의 관리를 돕고자, <code class="highlighter-rouge">LevelTracker</code> 는 <code class="highlighter-rouge">advance(to:)</code> 라는 인스턴스 메서드를 정의합니다. <code class="highlighter-rouge">currentLevel</code> 을 갱신하기 전에, 이 메소드는 요청한 새 레벨이 이미 잠금 해제되었는지 검사합니다. <code class="highlighter-rouge">advance(to:)</code> 메소드는 ‘불린 (Boolean)’ 값을 반환하여 실제로 <code class="highlighter-rouge">currentLevel</code> 로 설정할 수 있는 지를 나타냅니다. <code class="highlighter-rouge">advance(to:)</code> 메소드를 호출하는 코드가 그 반환 값을 무시하는 것을 실수라고 할 수는 없기 때문에, 이 함수를 <code class="highlighter-rouge">@discardableResult</code> 특성을 써서 표시했습니다. 이 특성에 대한 더 자세한 정보는, <a href="https://docs.swift.org/swift-book/ReferenceManual/Attributes.html">Attributes (특성)</a> 을 참고하기 바랍니다.</p>

<p><code class="highlighter-rouge">LevelTracker</code> 구조체는, 아래와 같이, <code class="highlighter-rouge">Player</code> 클래스와 함께 사용되어, 개별 참여자의 진행 상황을 추적하고 갱신합니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Player</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">tracker</span> <span class="o">=</span> <span class="kt">LevelTracker</span><span class="p">()</span>
  <span class="k">let</span> <span class="nv">playerName</span><span class="p">:</span> <span class="kt">String</span>
  <span class="kd">func</span> <span class="nf">complete</span><span class="p">(</span><span class="nv">level</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">LevelTracker</span><span class="o">.</span><span class="nf">unlock</span><span class="p">(</span><span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">tracker</span><span class="o">.</span><span class="nf">advance</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">playerName</span> <span class="o">=</span> <span class="n">name</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">Player</code> 클래스는 해당 참여자의 진행 상황을 추적하기 위해 <code class="highlighter-rouge">LevelTracker</code> 의 새 인스턴스를 생성합니다. 또 참여자가 특정 레벨을 완료할 때마다 호출되는 <code class="highlighter-rouge">complete(level:)</code> 이라는 메소드도 제공합니다. 이 메소드는 모든 참여자를 위해 다음 레벨을 잠금 해제하고 다음 레벨로 이동하기 위해 참여자의 진행 상황을 갱신합니다. (<code class="highlighter-rouge">advance(to:)</code> 의 ‘불린 (Boolean)’ 반환 값은 무시되는데, 이전 행의 <code class="highlighter-rouge">LevelTracker.unlock(_:)</code> 호출로 이미 그 레벨이 잠금 해제된 것을 알게 됐기 때문입니다.)</p>

<p>새 참여자를 위해 <code class="highlighter-rouge">Player</code> 클래스의 인스턴스를 생성하고, 참여자가 첫 번째 레벨을 완료했을 때 어떤 일이 일어나는지 보도록 합시다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">player</span> <span class="o">=</span> <span class="kt">Player</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Argyrious"</span><span class="p">)</span>
<span class="n">player</span><span class="o">.</span><span class="nf">complete</span><span class="p">(</span><span class="nv">level</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"highest unlocked level is now </span><span class="se">\(</span><span class="kt">LevelTracker</span><span class="o">.</span><span class="n">highestUnlockedLevel</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="c1">// "highest unlocked level is now 2" 를 출력합니다.</span>
</code></pre></div></div>

<p>두 번째 참여자를 생성해서, 어떤 참여자도 게임에서 잠금 해제한 적이 없는 레벨로 이동하려고 하면, 그 참여자의 현재 레벨을 설정하려는 시도가 실패하게 됩니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">player</span> <span class="o">=</span> <span class="kt">Player</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Beto"</span><span class="p">)</span>
<span class="k">if</span> <span class="n">player</span><span class="o">.</span><span class="n">tracker</span><span class="o">.</span><span class="nf">advance</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="mi">6</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">print</span><span class="p">(</span><span class="s">"player is now on level 6"</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nf">print</span><span class="p">(</span><span class="s">"level 6 has not yet been unlocked"</span><span class="p">)</span>
<span class="p">}</span>
<span class="s">"level 6 has not yet been unlocked"</span> <span class="n">를</span> <span class="n">출력합니다</span><span class="o">.</span>
</code></pre></div></div>

<h3 id="참고-자료">참고 자료</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:Methods" role="doc-endnote">
      <p>이 글에 대한 원문은 <a href="https://docs.swift.org/swift-book/LanguageGuide/Methods.html">Methods</a> 에서 확인할 수 있습니다. <a href="#fnref:Methods" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:method-and-function" role="doc-endnote">
      <p>‘특정한 타입에 관련되어 있는 함수’ 를 부르는 호칭은 프로그래밍 언어마다 조금씩 다른데, ‘멤버 함수 (member function)’ 나 ‘프로시져 (procedure)’ 라는 단어를 사용하기도 합니다. 하지만 이미 많은 언어에서 특정 타입에 속해 있는 함수를 ‘메소드’ 라고 부르고 있는데, 스위프트에서도 널리 쓰이는 용어를 선택한 것으로 생각할 수 있습니다. <a href="#fnref:method-and-function" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:c-structure" role="doc-endnote">
      <p>사실 지금은 ‘C 언어’ 에서도 구조체가 메소드를 정의할 수 있는데, 이는 ‘C++ 언어’ 가 나오고 나서의 일이긴 합니다. 처음 C 언어가 나왔을 때는 구조체에서 메소드를 정의할 수 없었습니다. <a href="#fnref:c-structure" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:implicit-property" role="doc-endnote">
      <p>여기서 ‘암시적인 속성 (implicit property)’ 이란 따로 정의하지 않아도 이미 가지고 있는 속성을 말합니다. <a href="#fnref:implicit-property" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:implicit-parameter" role="doc-endnote">
      <p>열거체의 <code class="highlighter-rouge">self</code> 에 대해서는 본문에서 ‘암시적인 매개 변수 (implicit parameter)’ 라는 용어를 사용하고 있습니다. 정확한 이유는 아직 잘 모르겠습니다. 속성이 아니라 매개 변수에서 <code class="highlighter-rouge">self</code> 를 가지고 있다고 추측할 수 있을 것 같습니다. <a href="#fnref:implicit-parameter" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:unqualified" role="doc-endnote">
      <p>메소드나 속성 이름이 ‘규명되지 않은 (unqualified)’ 것은 접두사가 없어서 어디에 소속되었는지 불분명한 것들을 의미하는 것 같습니다. 이 경우 스위프트 컴파일러가 나름대로 이들을 규명하려고 하게 됩니다. 반면 메소드와 속성 이름이 ‘규명된 (qualified)’ 것들도 있습니다. <a href="#fnref:unqualified" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET