I"�<blockquote>
  <p>Apple 에서 공개한 <a href="https://docs.swift.org/swift-book/">The Swift Programming Language (Swift 5.2)</a> 책의 <a href="https://docs.swift.org/swift-book/GuidedTour/Compatibility.html">Version Compatibility</a> 부분<sup id="fnref:Version-Compatibility" role="doc-noteref"><a href="#fn:Version-Compatibility" class="footnote">1</a></sup>을 번역하고 정리한 글입니다.</p>

  <p>현재 전체 중에서 번역 완료된 목록은 <a href="/swift/programming/language/grammar/2017/02/28/The-Swift-Programming-Language.html">Swift 5.2: Swift Programming Language (스위프트 프로그래밍 언어)</a> 에서 확인할 수 있습니다.</p>
</blockquote>

<h2 id="version-compatibility-버전-호환성">Version Compatibility (버전 호환성)</h2>

<p>이 책은 ‘Xcode (엑스코드) 11.4’ 에 탑재된 기본 버전인 ‘스위프트 5.2’ 를 설명합니다. Xcode 11.4 를 사용하여 스위프트 5.2, 스위프트 4.2, 또는 스위프트 4 로 작성된 타겟 (targets)<sup id="fnref:targets" role="doc-noteref"><a href="#fn:targets" class="footnote">2</a></sup> 을 빌드할 수 있습니다.</p>

<p>Xcode 11.4 로 스위프트 4 와 스위프트 4.2 의 코드를 빌드할 때, 스위프트 5.2 의 기능을 대부분 사용할 수 있습니다. 그렇다 하더라도, 아래의 변경 사항들은 스위프트 5.2 이상을 사용한 코드에서만 사용할 수 있습니다:</p>

<ul>
  <li>Opaque (불투명한) 타입을 반환하는 함수는 스위프트 5.1 ‘런타임 (runtime)’<sup id="fnref:swift-runtime" role="doc-noteref"><a href="#fn:swift-runtime" class="footnote">3</a></sup> 을 요구합니다.</li>
  <li><code class="highlighter-rouge">try?</code> 표현식은 이미 옵셔널 (optionals) 을 반환하는 표현식에 옵셔널리티 단계 (level of optionality) 을 추가하지 않습니다.<sup id="fnref:level-of-optionality" role="doc-noteref"><a href="#fn:level-of-optionality" class="footnote">4</a></sup></li>
  <li>‘큰 정수 글자표현 (large integer literal)’ 을 사용하는 초기화 표현식도 올바른 정수 타입인 것으로 추론합니다. 예를 들어, <code class="highlighter-rouge">UInt64(0xffff_ffff_ffff_ffff)</code> 라고 해도 값이 넘친 것이 아니라 올바른 값으로 인식합니다.</li>
</ul>

<p>스위프트 5.2 로 작성된 타겟과 스위프트 4.2 나 스위프트 4 로 작성된 타겟은 서로 의존성을 가져도 문제가 없습니다.<sup id="fnref:depend-on" role="doc-noteref"><a href="#fn:depend-on" class="footnote">5</a></sup> 이것이 의미하는 것은, 여러 개의 프레임웍으로 나누어진 큰 프로젝트에서, 코드를 스위프트 4 에서 스위프트 5.2 로 이전할 때 한 번에 한 프레임웍씩 진행할 수 있다는 것입니다.</p>

<h3 id="참고-자료">참고 자료</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:Version-Compatibility" role="doc-endnote">
      <p>이 글에 대한 원문은 <a href="https://docs.swift.org/swift-book/GuidedTour/Compatibility.html">Version Compatibility</a> 에서 확인할 수 있습니다. <a href="#fnref:Version-Compatibility" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:targets" role="doc-endnote">
      <p>엑스코드 에서 하나의 ‘대상 (target; 타켓)’ 이란 하나의 ‘제품 (product) 을 정의한 것’ 입니다. 하나의 프로젝트에서도 타겟은 여러 개가 될 수 있습니다. 좀 더 자세한 내용은 <a href="https://developer.apple.com/library/archive/featuredarticles/XcodeConcepts/Concept-Targets.html">Xcode Target</a> 문서를 보도록 합니다. <a href="#fnref:targets" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:swift-runtime" role="doc-endnote">
      <p>런타임 (runtime) 은 ‘런타임 라이브러리’ 를 의미하는데, 위키피디아의 <a href="https://en.wikipedia.org/wiki/Swift_(programming_language)">Swift (programming language)</a> 항목에 따르면, 2019년 3월에 공개된 스위프트 5 부터는 ABI 안전성 (ABI Stability)<sup id="fnref:ABI-Stability" role="doc-noteref"><a href="#fn:ABI-Stability" class="footnote">6</a></sup> 을 지원하면서 스위프트 런타임이 애플 운영체제 속에 포함되었다고 합니다. 즉 최신 버전의 스위프트 런타임을 사용하려면 운영체제를 업데이트하는 것이 필요합니다. 스위프트의 런타임에 대한 더 많은 내용은 <a href="https://github.com/apple/swift/blob/master/docs/Runtime.md">The Swift Runtime</a> 라는 글을 보도록 합니다. <a href="#fnref:swift-runtime" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:level-of-optionality" role="doc-endnote">
      <p>‘옵셔널 단계’ 를 추가하지 않는다는 말은 ‘옵셔널 연쇄 (optional chaining)’ 에서 처럼, 여러 단계로 중첩이 되어도 마지막에 값을 구할 때는 ‘옵셔널 값 (optional value)’ 을 한 번만 벗기면 된다는 의미입니다. 좀 더 자세한 내용은 <a href="https://docs.swift.org/swift-book/LanguageGuide/OptionalChaining.html">Optional Chaining</a> 문서를 보도록 합니다. <a href="#fnref:level-of-optionality" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:depend-on" role="doc-endnote">
      <p>이것은 ABI 안정성<sup id="fnref:ABI-Stability:1" role="doc-noteref"><a href="#fn:ABI-Stability" class="footnote">6</a></sup> 에 더해서 스위프트 5.2 부터 모듈 안정성 (module stability) 도 지원하기 때문인 것으로 추측됩니다. 이 부분은 대해서는 <a href="https://swift.org/blog/abi-stability-and-more/">ABI Stability and More</a> 글을 보도록 합니다. <a href="#fnref:depend-on" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:ABI-Stability" role="doc-endnote">
      <p>스위프트의 ABI 안정성에 대해서는 <a href="https://swift.org/blog/abi-stability-and-apple/">Evolving Swift On Apple Platforms After ABI Stability</a> 라는 글을 보도록 합니다. 한글 자료로는 <strong>Zedd02028</strong> 님이 <a href="https://zeddios.tistory.com/654">ABI stability</a> 라는 글에 정리를 잘 해두신 것 같습니다. <a href="#fnref:ABI-Stability" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:ABI-Stability:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p>
    </li>
  </ol>
</div>
:ET