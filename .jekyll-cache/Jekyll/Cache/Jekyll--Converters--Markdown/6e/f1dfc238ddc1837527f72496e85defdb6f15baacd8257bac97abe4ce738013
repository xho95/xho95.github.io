I"6�<blockquote>
  <p>Apple 에서 공개한 <a href="https://docs.swift.org/swift-book/">The Swift Programming Language (Swift 5.2)</a> 책의 <a href="https://docs.swift.org/swift-book/LanguageGuide/Extensions.html">Extensions</a> 부분<sup id="fnref:Extensions" role="doc-noteref"><a href="#fn:Extensions" class="footnote">1</a></sup>을 번역하고 정리한 글입니다.</p>

  <p>현재 전체 중에서 번역 완료된 목록은 <a href="/swift/programming/language/grammar/2017/02/28/The-Swift-Programming-Language.html">Swift 5.2: Swift Programming Language (스위프트 프로그래밍 언어)</a> 에서 확인할 수 있습니다.</p>
</blockquote>

<h2 id="extensions-확장">Extensions (확장)</h2>

<p><em>extensions (확장)</em> <sup id="fnref:extension" role="doc-noteref"><a href="#fn:extension" class="footnote">2</a></sup>은 이미 존재하는 클래스, 구조체, 열거체<sup id="fnref:enumeration" role="doc-noteref"><a href="#fn:enumeration" class="footnote">3</a></sup> 또는 프로토콜 타입에 새로운 기능 (functionality)<sup id="fnref:functionality" role="doc-noteref"><a href="#fn:functionality" class="footnote">4</a></sup> 을 추가하는 식으로 확장하는 것입니다. 원본 소스 코드에 접근할 수 없는 타입도 확장이 가능합니다. (이를 <em><code class="highlighter-rouge">retroactive modeling (소급 적용 모델링)</code></em> 이라고 합니다.)<sup id="fnref:retroactive-modeling" role="doc-noteref"><a href="#fn:retroactive-modeling" class="footnote">5</a></sup> 익스텐션은 오브젝티브-C 의 ‘categories (카테고리; 범주)’ 와 유사합니다. (하지만 오브젝티브-C 의 카테고리와는 다르게, 스위프트의 익스텐션은 이름을 가지지 않습니다.)</p>

<p>스위프트의 익스텐션은 다음과 같은 것들을 할 수 있습니다:</p>

<ul>
  <li>계산 인스턴스 속성 (computed instance properties) 및 계산 타입 속성 (computed type properties) 추가하기</li>
  <li>인스턴스 메소드 (instance methods 및 타입 메소드 (type methods) 정의하기</li>
  <li>새로운 초기자 (initializer) 제공하기</li>
  <li>첨자 연산자 (subscripts) 정의하기</li>
  <li>새로운 ‘품어진 타입 (nested types)’ 정의하고 사용하기</li>
  <li>기존 타입이 특정한 프로토콜을 준수하도록 만들기</li>
</ul>

<p>스위프트에서는, 프로토콜을 확장해서 ‘필수 조건 (requirements)’ 에 대한 구현을 제공하거나 또는 추가적인 기능을 추가하여 (프로토콜을) 준수하는 타입에게 편의를 제공할 수도 있습니다. 이에 대한 자세한 내용은 <a href="/swift/language/grammar/protocol/2016/03/03/Protocols.html#protocol-extensions-프로토콜-확장">Protocol Extensions (프로토콜 확장)</a> 을 보도록 합니다.</p>

<blockquote>
  <p>익스텐션은 타입에 새로운 기능을 추가할 수 있지만, 이미 있는 기능을 덮어쓸 (override) 수는 없습니다.</p>
</blockquote>

<h3 id="extension-syntax-확장-구문-표현">Extension Syntax (확장 구문 표현)</h3>

<p>익스텐션을 선언할 때는 <code class="highlighter-rouge">extension</code> 키워드를 사용합니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">SomeType</span> <span class="p">{</span>
  <span class="c1">// 여기서 SomeType 의 새로운 기능을 추가합니다.</span>
<span class="p">}</span>
</code></pre></div></div>

<p>익스텐션으로 기존 타입을 확장하여 하나 이상의 프로토콜을 채택 (adopt) 하도록 만들 수 있습니다. ‘프로토콜 준수 기능 (protocol conformance)’ 을 추가하려면, (상속할 때) 클래스나 구조체의 이름을 작성하는 것과 같은 방법으로 프로토콜 이름을 작성하면 됩니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">SomeType</span><span class="p">:</span> <span class="kt">SomeProtocol</span><span class="p">,</span> <span class="kt">AnotherProtocol</span> <span class="p">{</span>
  <span class="c1">// 여기서 프로토콜의 '필수 조건 (requirements)' 을 구현합니다.</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이와 같은 방식으로 ‘프로토콜 준수 기능 (protocol conformance)’ 을 추가하는 것은 <a href="https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID277">Adding Protocol Conformance with an Extension (확장으로 프로토콜 준수 기능 추가하기)</a> 에서 설명합니다.</p>

<p>‘extension (확장)’ 으로 이미 존재하는 일반화된 타입 (generic type) 도 확장할 수 있으며, 이는 <a href="https://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID185">Extending a Generic Type (일반화된 타입 확장하기)</a> 에서 설명합니다. 일반화된 타입을 확장할 때 조건부로 기능을 추가할 수도 있는데, 이는 <a href="https://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID553">Extensions with a Generic Where Clause (일반화된 Where 구절을 사용하여 확장하기)</a> 에서 설명하도록 합니다.</p>

<blockquote>
  <p>익스텐션을 정의해서 기존 타입에 새 기능을 추가하면, 이 기능은 해당하는 타입의 이미 존재하는 모든 인스턴스에서 사용할수 있으며, 익스텐션이 정의되기 전에 생성된 인스턴스도 예외가 아닙니다.</p>
</blockquote>

<h3 id="computed-properties-계산-속성">Computed properties (계산 속성)</h3>

<p>익스텐션으로 이미 존재하는 타입에 계산 인스턴스 속성 (computed instance properties) 과 계산 타입 속성 (computed type properties) 을 추가할 수 있습니다. 아래 예제는 스위프트에 내장된 타입인 <code class="highlighter-rouge">Double</code> 에 다섯 개의 계산 인스턴스 속성을 추가해서, 거리 단위 작업을 지원하는 방법을 보여줍니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">Double</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">km</span><span class="p">:</span> <span class="kt">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="k">self</span> <span class="o">*</span> <span class="mf">1_000.0</span> <span class="p">}</span>
  <span class="k">var</span> <span class="nv">m</span><span class="p">:</span> <span class="kt">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="k">self</span> <span class="p">}</span>
  <span class="k">var</span> <span class="nv">cm</span><span class="p">:</span> <span class="kt">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="k">self</span> <span class="o">/</span> <span class="mf">100.0</span> <span class="p">}</span>
  <span class="k">var</span> <span class="nv">mm</span><span class="p">:</span> <span class="kt">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="k">self</span> <span class="o">/</span> <span class="mf">1_000.0</span> <span class="p">}</span>
  <span class="k">var</span> <span class="nv">ft</span><span class="p">:</span> <span class="kt">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="k">self</span> <span class="o">/</span> <span class="mf">3.28084</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">oneInch</span> <span class="o">=</span> <span class="mf">25.4</span><span class="o">.</span><span class="n">mm</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"One inch is </span><span class="se">\(</span><span class="n">oneInch</span><span class="se">)</span><span class="s"> meters"</span><span class="p">)</span>
<span class="c1">// Prints "One inch is 0.0254 meters"</span>

<span class="k">let</span> <span class="nv">threeFeet</span> <span class="o">=</span> <span class="mi">3</span><span class="o">.</span><span class="n">ft</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"Three feet is </span><span class="se">\(</span><span class="n">threeFeet</span><span class="se">)</span><span class="s"> meters"</span><span class="p">)</span>
<span class="c1">// Prints "Three feet is 0.914399970739201 meters"</span>
</code></pre></div></div>

<p>이 계산 속성들 (computed properties) 을 사용하면 <code class="highlighter-rouge">Double</code> 값이 길이 단위를 가진 것처럼 표현할 수 있습니다. 비록 계산 속성으로 구현되었더라도, 속성의 이름을 ‘부동-소수점 글자표현 값 (floating-point literal value)’<sup id="fnref:literal" role="doc-noteref"><a href="#fn:literal" class="footnote">6</a></sup> 뒤에 점을 찍고 붙여서, 거리 변환을 수행하여 사용할 수 있습니다.</p>

<p>이 예에서, <code class="highlighter-rouge">Double</code> 값 <code class="highlighter-rouge">1.0</code> 은 “1 미터” 를 나타내는 것으로 볼 수 있습니다. 이것이 계산 속성 <code class="highlighter-rouge">m</code> 이 <code class="highlighter-rouge">self</code> 를 반환하는 이유인데-<code class="highlighter-rouge">1.m</code> 이라는 표현은 <code class="highlighter-rouge">Double</code> 값 <code class="highlighter-rouge">1.0</code> 으로 계산되기 때문입니다.</p>

<p>다른 단위들은 미터 기준으로 표현하기 위해 약간의 변환이 필요합니다. 1 킬로미터는 1,000 미터와 같으므로, <code class="highlighter-rouge">km</code> 계산 속성은 <code class="highlighter-rouge">1_000.0</code> 을 곱해서 미터 기준으로 변환합니다. 마찬가지로 1 미터는 3.28084 피트이므로,<code class="highlighter-rouge">ft</code> 계산 속성은 <code class="highlighter-rouge">Double</code> 값 <code class="highlighter-rouge">3.28084</code> 로 나눠서 피트 값을 미터로 변환합니다.</p>

<p>이 속성들은 ‘읽기-전용 계산 속성 (read-only computed properties)’ 이므로, <code class="highlighter-rouge">get</code> 키워드 없이 간결하게 작성할 수도 있습니다. 반환 값은 <code class="highlighter-rouge">Double</code> 타입이며, <code class="highlighter-rouge">Double</code> 을 쓸 수 있다면 어디서나 수학 계산과 함께 쓸 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">aMarathon</span> <span class="o">=</span> <span class="mi">42</span><span class="o">.</span><span class="n">km</span> <span class="o">+</span> <span class="mi">195</span><span class="o">.</span><span class="n">m</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"A marathon is </span><span class="se">\(</span><span class="n">aMarathon</span><span class="se">)</span><span class="s"> meters long"</span><span class="p">)</span>
<span class="c1">// Prints "A marathon is 42195.0 meters long"</span>
</code></pre></div></div>

<blockquote>
  <p>익스텐션은 이미 존재하는 속성들에 계산 속성을 새로 추가할 수는 있지만, 저장 속성 (stored properties)이나 속성 옵져버 (property observers) 를 추가할 수는 없습니다.</p>
</blockquote>

<h3 id="initializers-초기자">Initializers (초기자)</h3>

<p>익스텐션은 이미 존재하는 타입에 ‘초기자 (initializer)’ 를 새로 추가할 수 있습니다. 이를 활용하면, 다른 타입을 확장해서 초기자의 매개 변수로 내가 만든 타입도 넘겨줄 수 있으며, 원래 타입의 구현에는 없던 새로운 초기자 옵션을 제공하는 것도 가능해집니다.</p>

<p>익스텐션은 클래스에 편의 초기자 (convenience initializers)를 새로 추가할 수는 있지만, ‘지명 초기자 (designated initializers)’ 나 ‘정리자 (deinitializers)’ 를 추가할 수는 없습니다. ‘지명 초기자’ 나 ‘정리자’ 는 반드시 본래의 클래스 구현에서 제공해야만 합니다.</p>

<p>익스텐션을 사용해서 값 타입에 초기자를 추가하는 경우 중에서, 해당 값 타입이 모든 저장 속성에 ‘기본 설정 값’ 을 제공하면서도 초기자가 정의된 것이 하나도 없는 경우, 익스텐션 내의 초기자에서 ‘기본 설정 초기자 (default initializer)’ 와 ‘멤버 초기자 (memberwise initializer)’ 를 호출할 수 있습니다. 값 타입의 원래 구현에 초기자가 하나라도 있는 경우에는 해당하지 않으며, 이는 <strong>Initializer Delegation for Value Types (값 타입을 위한 초기자의 위임)</strong> 에 설명되어 있습니다.</p>

<p>익스텐션을 사용해서 다른 모듈에서 선언한 구조체에 초기자를 추가할 경우, 이 새 초기자 내에서 <code class="highlighter-rouge">self</code> 에 접근하려면 모듈에서 정의된 초기자 중 하나를 먼저 호출해야만 합니다.</p>

<p>아래는 기하학적인 사각형을 표현하는 <code class="highlighter-rouge">Rect</code> 구조체를 정의하는 예제입니다. 이 예제는 <code class="highlighter-rouge">Size</code> 와 <code class="highlighter-rouge">Point</code> 라는 두 개의 구조체도 정의하는데, 둘 다 모든 속성의 기본 설정 값이 <code class="highlighter-rouge">0.0</code> 입니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">Size</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">width</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="mf">0.0</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">Point</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">x</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">Rect</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">origin</span> <span class="o">=</span> <span class="kt">Point</span><span class="p">()</span>
  <span class="k">var</span> <span class="nv">size</span> <span class="o">=</span> <span class="kt">Size</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">Rect</code> 구조체는 모든 속성에 기본 설정 값을 제공하고 있으므로, <a href="/xcode/swift/grammar/initialization/2016/01/23/Initialization.html#default-initializers-기본-설정-초기자">Default Initializers (기본 설정 초기자)</a> 에 설명한 것처럼, 자동으로 ‘기본 설정 초기자’와 ‘멤버 초기자’를 가지게 됩니다. 이 초기자로 새 <code class="highlighter-rouge">Rect</code> 인스턴스를 만들 수 있습니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">defaultRect</span> <span class="o">=</span> <span class="kt">Rect</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">memberwiseRect</span> <span class="o">=</span> <span class="kt">Rect</span><span class="p">(</span><span class="nv">origin</span><span class="p">:</span> <span class="kt">Point</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mf">2.0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mf">2.0</span><span class="p">),</span> <span class="nv">size</span><span class="p">:</span> <span class="kt">Size</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mf">5.0</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mf">5.0</span><span class="p">))</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">Rect</code> 구조체를 확장하여 특정 중심점과 크기를 가지는 초기자를 추가로 제공할 수도 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">Rect</span> <span class="p">{</span>
  <span class="nf">init</span><span class="p">(</span><span class="nv">center</span><span class="p">:</span> <span class="kt">Point</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="kt">Size</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">originX</span> <span class="o">=</span> <span class="n">center</span><span class="o">.</span><span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">size</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">originY</span> <span class="o">=</span> <span class="n">center</span><span class="o">.</span><span class="n">y</span> <span class="o">-</span> <span class="p">(</span><span class="n">size</span><span class="o">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
    <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">origin</span><span class="p">:</span> <span class="kt">Point</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">originX</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">originY</span><span class="p">),</span> <span class="nv">size</span><span class="p">:</span> <span class="n">size</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이 새 초기자는 먼저 주어진 <code class="highlighter-rouge">center</code> (중심점) 과 <code class="highlighter-rouge">size</code> (크기) 값을 바탕으로 적절한 원점을 계산합니다. 그 다음으로 구조체가 자동으로 가지는 멤버 초기자인 <code class="highlighter-rouge">init(origin:size:)</code> 를 호출하여, 적절한 속성에 새 원점과 크기 값을 저장하도록 시킵니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">centerRect</span> <span class="o">=</span> <span class="kt">Rect</span><span class="p">(</span><span class="nv">center</span><span class="p">:</span> <span class="kt">Point</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mf">4.0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mf">4.0</span><span class="p">),</span> <span class="nv">size</span><span class="p">:</span> <span class="kt">Size</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mf">3.0</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mf">3.0</span><span class="p">))</span>
<span class="c1">// centerRect 의 원점은 (2.5, 2.5) 이고, 크기는 (3.0, 3.0) 입니다.</span>
</code></pre></div></div>

<blockquote>
  <p>익스텐션으로 새 초기자를 제공하는 경우에도, 초기자가 완료되는 시점에 각 인스턴스가 온전히 초기화되도록 하는 것은 여전히 여러분 몫입니다.</p>
</blockquote>

<h3 id="methods">Methods</h3>

<p>익스텐션으로 기존 타입에 새로운 인스턴스 메소드 (instance methods) 와 타입 메소드 (type methods) 를 추가할 수 있습니다. 아래 예제는 <code class="highlighter-rouge">Int</code> 타입에 새로 <code class="highlighter-rouge">repetitions</code> (반복) 이라는 인스턴스 메소드를 추가하고 있습니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">Int</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">repetitions</span><span class="p">(</span><span class="nv">task</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="k">self</span> <span class="p">{</span>
      <span class="nf">task</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">repetitions(task:)</code> 메소드는 인자로 <code class="highlighter-rouge">() -&gt; Void</code> 타입의 값 하나만을 가지는데, 이는 매개 변수도 없고 반환 값도 없는 함수를 의미합니다.</p>

<p>이 익스텐션 (확장) 을 정의한 후에는 어떤 정수 값에서도 <code class="highlighter-rouge">repetitions(task:)</code> 메소드를 호출할 수 있어서 여러 번의 임무를 반복 수행할 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">3</span><span class="o">.</span><span class="n">repetitions</span> <span class="p">{</span>
  <span class="nf">print</span><span class="p">(</span><span class="s">"Hello!"</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Hello!</span>
<span class="c1">// Hello!</span>
<span class="c1">// Hello!</span>
</code></pre></div></div>

<h4 id="mutating-instance-methods-인스턴스를-변경하는-메소드">Mutating Instance Methods (인스턴스를 변경하는 메소드)</h4>

<p>익스텐션으로 추가된 인스턴스 메소드는 인스턴스 자체를 수정 (또는 <em>변경 (mutate)</em>) 할 수도 있습니다. 구조체 또는 열거체에서 <code class="highlighter-rouge">self</code> 나 속성을 수정하는 메소드는 반드시 인스턴스 메소드에 <code class="highlighter-rouge">mutating</code> 을 표기해야 하며, 이는 원래의 구현에 있는 ‘mutating (변경) 메소드’ 와 같은 방식입니다.</p>

<p>아래는 스위프트의 <code class="highlighter-rouge">Int</code> 타입에 <code class="highlighter-rouge">square</code> (제곱) 이라는 새로운 변경 메소드를 추가하는 예제로, 원래의 값을 제곱합니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">Int</span> <span class="p">{</span>
  <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">square</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">self</span> <span class="o">=</span> <span class="k">self</span> <span class="o">*</span> <span class="k">self</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nv">someInt</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">someInt</span><span class="o">.</span><span class="nf">square</span><span class="p">()</span>
<span class="c1">// someInt 는 이제 9 입니다.</span>
</code></pre></div></div>

<h3 id="subscripts-첨자-연산">Subscripts (첨자 연산)</h3>

<p>익스텐션으로 기존 타입에 새 ‘첨자 연산 (subscripts)’을 추가할 수 있습니다. 아래는 스위프트 내장 타입인 <code class="highlighter-rouge">Int</code> 에 정수 첨자 연산 (integer subscripts) 을 추가하는 예제입니다. 첨자 연산 <code class="highlighter-rouge">[n]</code> 은 주어진 수의 오른쪽 <code class="highlighter-rouge">n</code> 번째 자리 값을 10진수로 반환합니다.</p>

<ul>
  <li><code class="highlighter-rouge">123456789[0]</code> 은 <code class="highlighter-rouge">9</code> 를 반환합니다.</li>
  <li><code class="highlighter-rouge">123456789[1]</code> 은 <code class="highlighter-rouge">8</code> 을 반환합니다.</li>
</ul>

<p>… 이런 식으로 계속됩니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">Int</span> <span class="p">{</span>
  <span class="nf">subscript</span><span class="p">(</span><span class="nv">digitIndex</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">decimalBase</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">digitIndex</span> <span class="p">{</span>
      <span class="n">decimalBase</span> <span class="o">*=</span> <span class="mi">10</span>
    <span class="p">}</span>
    <span class="nf">return</span> <span class="p">(</span><span class="k">self</span> <span class="o">/</span> <span class="n">decimalBase</span><span class="p">)</span> <span class="o">%</span> <span class="mi">10</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="mi">746381295</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="c1">// 5 를 반환합니다.</span>
<span class="mi">746381295</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="c1">// 9 를 반환합니다.</span>
<span class="mi">746381295</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="c1">// 2 를 반환합니다.</span>
<span class="mi">746381295</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span>
<span class="c1">// 7 을 반환합니다.</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">Int</code> 값이 가진 숫자 개수보다 큰 값으로 요청하면, 첨자 연산이 <code class="highlighter-rouge">0</code> 을 반환하는데, 이는 수 왼쪽이 <code class="highlighter-rouge">0</code>으로 채워진 것으로 이해하면 됩니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">746381295</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span>
<span class="c1">// 마치 아래와 같이 요청한 것처럼, 0 을 반환합니다:</span>
<span class="mo">07463</span><span class="mi">81295</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="nested-types-품어진-타입">Nested Types (품어진 타입)</h3>

<p>익스텐션을 써서 이미 존재하는 클래스, 구조체, 그리고 열거체에 ‘품어진 타입 (nested type)’<sup id="fnref:nested-type" role="doc-noteref"><a href="#fn:nested-type" class="footnote">7</a></sup>을 새로 추가할 수 있습니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">Int</span> <span class="p">{</span>
  <span class="kd">enum</span> <span class="kt">Kind</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">negative</span><span class="p">,</span> <span class="n">zero</span><span class="p">,</span> <span class="n">positive</span>
  <span class="p">}</span>
  <span class="k">var</span> <span class="nv">kind</span><span class="p">:</span> <span class="kt">Kind</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="k">self</span> <span class="p">{</span>
    <span class="k">case</span> <span class="mi">0</span><span class="p">:</span>
      <span class="k">return</span> <span class="o">.</span><span class="n">zero</span>
    <span class="k">case</span> <span class="k">let</span> <span class="nv">x</span> <span class="k">where</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
      <span class="k">return</span> <span class="o">.</span><span class="n">positive</span>
    <span class="k">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="o">.</span><span class="n">negative</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이 예제는 <code class="highlighter-rouge">Int</code> 에 ‘품어진 열거체’를 새로 추가합니다. 이 열거체는 <code class="highlighter-rouge">Kind</code> 라고 하는데 정수가 나타내는 수의 종류를 표시합니다. 특히 이 수가 음수인지, 0 인지, 양수인지를 표시합니다.</p>

<p>이 예제는 또 <code class="highlighter-rouge">Int</code> 에 <code class="highlighter-rouge">kind</code> 라는 새로운 ‘계산 인스턴스 속성’을 추가해서, 이 정수에 맞는 적당한 <code class="highlighter-rouge">Kind</code> 열거체의 사례 값<sup id="fnref:case" role="doc-noteref"><a href="#fn:case" class="footnote">8</a></sup>을 반환합니다.</p>

<p>이제 ‘품어진 열거체’는 모든 <code class="highlighter-rouge">Int</code> 값에서 사용할 수 있습니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">printIntegerKinds</span><span class="p">(</span><span class="n">_</span> <span class="nv">number</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">number</span> <span class="k">in</span> <span class="n">numbers</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="n">number</span><span class="o">.</span><span class="n">kind</span> <span class="p">{</span>
    <span class="k">case</span> <span class="o">.</span><span class="nv">negative</span><span class="p">:</span>
      <span class="nf">print</span><span class="p">(</span><span class="s">"- "</span><span class="p">,</span> <span class="nv">terminator</span><span class="p">:</span> <span class="s">""</span><span class="p">)</span>
    <span class="k">case</span> <span class="o">.</span><span class="nv">zero</span><span class="p">:</span>
      <span class="nf">print</span><span class="p">(</span><span class="s">"0 "</span><span class="p">,</span> <span class="nv">terminator</span><span class="p">:</span> <span class="s">""</span><span class="p">)</span>
    <span class="k">case</span> <span class="o">.</span><span class="nv">positive</span><span class="p">:</span>
      <span class="nf">print</span><span class="p">(</span><span class="s">"+ "</span><span class="p">,</span> <span class="nv">terminator</span><span class="p">:</span> <span class="s">""</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nf">print</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
<span class="p">}</span>

<span class="nf">printIntegerKinds</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="o">-</span><span class="mi">27</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span>
<span class="c1">// Prints "+ + - 0 - 0 + "</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">printIntegerKinds(_:)</code> 함수는 <code class="highlighter-rouge">Int</code> 값의 배열을 입력받아서 다음과 같은 계산을 순차적으로 진행합니다. 배열의 각 정수마다, 이 정수의 <code class="highlighter-rouge">kind</code> 계산 속성 값을 고려하여, 알맞은 설명을 출력합니다.</p>

<blockquote>
  <p><code class="highlighter-rouge">number.kind</code> 는 이미 <code class="highlighter-rouge">Int.Kind</code> 타입인 것을 알 수 있습니다. 이로 인해, <code class="highlighter-rouge">switch</code> 구문 내의 모든 <code class="highlighter-rouge">Int.Kind</code> 사례 값 (case values) 은 <code class="highlighter-rouge">Int.Kind.negative</code> 가 아니라 <code class="highlighter-rouge">.negative</code> 와 같은 축약된 형태 (shorthand form) 로 쓸 수 있습니다.</p>
</blockquote>

<h3 id="참고-자료">참고 자료</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:Extensions" role="doc-endnote">
      <p>원문은 <a href="https://docs.swift.org/swift-book/LanguageGuide/Extensions.html">Extensions</a> 에서 확인할 수 있습니다. <a href="#fnref:Extensions" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:extension" role="doc-endnote">
      <p><code class="highlighter-rouge">extension</code> 은 키워드이기도 하면서 ‘확장’이라는 뜻도 가지고 있는데, 키워드로 사용될 때는 익스텐션이라고 발음으로 옮기고, 확장이라는 의미로 사용될 때는 ‘확장’이라고 옮기도록 합니다. <a href="#fnref:extension" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:enumeration" role="doc-endnote">
      <p><code class="highlighter-rouge">class</code> 를 ‘객체’, <code class="highlighter-rouge">structure</code> 를 ‘구조체’ 라고 하듯이, 일관성을 유지하기 위해서 <code class="highlighter-rouge">enumeration</code> 을 ‘열거체’ 라고 옮깁니다. <a href="#fnref:enumeration" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:functionality" role="doc-endnote">
      <p>여기서 기능이라는 말이 중요한데, 확장 (extensions) 은 대상의 구조는 변화시키지 않고 기능만을 더하는 것입니다. 클래스를 예로 들면 실제로 새로운 ‘속성’이 추가되는 것은 없고 일종의 ‘메소드’ -또는 메소드에 준하는 요소-만 추가된다고 볼 수 있습니다. <a href="#fnref:functionality" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:retroactive-modeling" role="doc-endnote">
      <p>즉 스위프트 표준 라이브러리에서 제공하는 타입이나 패키지에 있는 타입들도 확장 (extensions) 할 수 있습니다. 이것 역시 확장이 대상의 구조 변화없이 기능만을 추가하기 때문이기도 합니다. <a href="#fnref:retroactive-modeling" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:literal" role="doc-endnote">
      <p><code class="highlighter-rouge">leteral</code> 은 문자로 표현된 것을 말하며, <code class="highlighter-rouge">leteral value</code> 는 ‘문자로 표현된 값’을 말합니다 .예를 들어 코드에서 <code class="highlighter-rouge">0</code> 이라고 작성할 때 실제로는 문자 ‘0’ 을 입력한 것이지만, <code class="highlighter-rouge">let a = 0</code> 에서의 <code class="highlighter-rouge">0</code> 은 하나의 수를 나타냅니다. 여기서 <code class="highlighter-rouge">0</code> 을 <code class="highlighter-rouge">integer literal value (정수 문자 값)</code> 라고 하며 ‘문자로 표현된 정수 값’이라는 의미를 갖습니다. <a href="#fnref:literal" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:nested-type" role="doc-endnote">
      <p>‘nested types’ 은 일단 ‘품어진 타입’으로 옮기도록 합니다. <a href="#fnref:nested-type" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:case" role="doc-endnote">
      <p><code class="highlighter-rouge">case</code> 에 적당한 말을 아직 못 찾았습니다. 임시로 ‘사례 값’으로 옮깁니다. <a href="#fnref:case" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET