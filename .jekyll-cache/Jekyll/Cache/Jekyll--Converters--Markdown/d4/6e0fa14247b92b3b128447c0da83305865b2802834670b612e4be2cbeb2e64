I"�Z<blockquote>
  <p>Apple 에서 공개한 <a href="https://docs.swift.org/swift-book/">The Swift Programming Language (Swift 5.2)</a> 책의 <a href="https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#">Protocols</a> 부분<sup id="fnref:Protocols" role="doc-noteref"><a href="#fn:Protocols" class="footnote">1</a></sup>을 정리한 글입니다.</p>

  <p>현재 전체 중에서 번역 완료된 목록은 <a href="/swift/programming/language/grammar/2017/02/28/The-Swift-Programming-Language.html">Swift 5.2: Swift Programming Language (스위프트 프로그래밍 언어)</a> 에서 확인할 수 있습니다.</p>
</blockquote>

<h2 id="protocols-규약">Protocols (규약)</h2>

<p><em>프로토콜</em> <sup id="fnref:protocol" role="doc-noteref"><a href="#fn:protocol" class="footnote">2</a></sup>은 메소드, 속성, 그리고 그 밖의 ‘필수 조건 (requirements)’ 이 특정 작업이나 일부 기능 (functionality) 에 맞도록 하는 ‘밑그림 (blueprint)’<sup id="fnref:blueprint" role="doc-noteref"><a href="#fn:blueprint" class="footnote">3</a></sup>을 정의합니다. 그런 다음 클래스나 구조체 또는 열거체들이 그 프로토콜을 <em>채택 (adopt)</em> 하여  ‘필수 조건 (requirements)’ 을 실제로 구현합니다. 어떤 타입이든지 프로토콜의 ‘필수 조건 (requirements)’ 을 만족하기만 하면 그 프로토콜을 <em>준수한다 (conform)</em> 라고 말합니다.</p>

<p>준수 타입 (conforming type) 이 ‘필수 조건 (requirements)’ 을 반드시 구현해야 하는 것과는 별개로, 프로토콜을 확장하는 것 또한 가능해서, 일부 ‘필수 조건 (requirements)’ 을 구현할 수도 있고 추가 기능의 구현을 통해서 준수 타입에게 편의를 제공할 수도 있습니다.</p>

<h3 id="protocol-syntax">Protocol Syntax</h3>

<h3 id="property-requirements-속성-필수-조건">Property Requirements (속성 필수 조건)</h3>

<h3 id="method-requirements-메소드-필수-조건">Method Requirements (메소드 필수 조건)</h3>

<h3 id="mutating-method-requirements-변경-메소드-필수-조건">Mutating Method Requirements (변경 메소드 필수 조건)</h3>

<h3 id="initializer-requirements-초기자-필수-조건">Initializer Requirements (초기자 필수 조건)</h3>

<p><strong>Class Implementation of Protocol Initializer Requirements</strong></p>

<p><strong>Failable Initializer Requirements</strong></p>

<h3 id="protocols-as-types-타입으로써의-프로토콜">Protocols as Types (타입으로써의 프로토콜)</h3>

<p>프로토콜은 실제로는 어떤 기능도 스스로 구현하지 않습니다. 그럼에도 불구하고 코드 내에서 온전한 타입인 것처럼 사용할 수 있습니다. 프로토콜을 타입인 것처럼 사용하는 것을 <em>실존 타입</em> 이라 부르기도 하는데, 이것은 “ 타입 T 는 <strong>실</strong> 제로 <strong>존</strong> 재하며, T 는 이 프로토콜을 준수한다” 는 문구에서 비롯된 것입니다.</p>

<p>다른 타입들이 허용되는 많은 곳에서 프로토콜을 사용할 수 있습니다. 가령 다음과 같은 곳들 입니다:</p>

<ul>
  <li>함수, 메소드 (method) 또는 초기자 (initializer) 의 매개 변수 타입이나 반환 타입으로써</li>
  <li>상수, 변수 또는 속성 (property) 의 타입으로써</li>
  <li>배열, 딕셔너리 (dictionary) 또는 다른 컨테이너 (container) 에 있는 요소 (item) 들의 타입으로써</li>
</ul>

<blockquote>
  <p>프로토콜은 타입이므로 이름은 대문자로 시작합니다. (<code class="highlighter-rouge">FullyNamed</code> 와 <code class="highlighter-rouge">RandomNumberGenerator</code> 처럼요) 스위프트에 있는 다른 타입들의 이름과 맞춰야 하기 때문입니다. (<code class="highlighter-rouge">Int</code>, <code class="highlighter-rouge">String</code>, 그리고 <code class="highlighter-rouge">Double</code> 이 그렇습니다.)</p>
</blockquote>

<p>다음은 프로토콜을 타입으로 사용하는 예입니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Dice</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">sides</span><span class="p">:</span> <span class="kt">Int</span>
  <span class="k">let</span> <span class="nv">generator</span><span class="p">:</span> <span class="kt">RandomNumberGenerator</span>
  <span class="nf">init</span><span class="p">(</span><span class="nv">sides</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="nv">generator</span><span class="p">:</span> <span class="kt">RandomNumberGenerator</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">sides</span> <span class="o">=</span> <span class="n">sides</span>
    <span class="k">self</span><span class="o">.</span><span class="n">generator</span> <span class="o">=</span> <span class="n">generator</span>
  <span class="p">}</span>
  <span class="kd">func</span> <span class="nf">roll</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">Int</span><span class="p">(</span><span class="n">generator</span><span class="o">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">*</span> <span class="kt">Double</span><span class="p">(</span><span class="n">sides</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이 예제는 <code class="highlighter-rouge">Dice</code> 라는 새로운 클래스로 보드 게임에 사용될 n면체 주사위를 정의합니다. <code class="highlighter-rouge">Dice</code> 인스턴스에 있는 <code class="highlighter-rouge">sides</code> 라는 정수 속성은 주사위-면의 개수를 나타내며, <code class="highlighter-rouge">generator</code> (생성기) 라는 속성은 난수 발생기를 제공하여 ‘주사위 굴림 값’을 생성합니다.</p>

<p><code class="highlighter-rouge">generator</code> 속성의 타입은 <code class="highlighter-rouge">RandomNumberGenerator</code> 입니다. 따라서 <code class="highlighter-rouge">RandomNumberGenerator</code> 프로토콜을 따른다면 어떤 타입의 인스턴스라도 설정할 수 있습니다. 이 속성에 할당하는 인스턴스로 필요한 사항은 반드시 <code class="highlighter-rouge">RandomNumberGenerator</code> 프로토콜을 따라야 한다는 것 한가지 뿐입니다. 타입이  <code class="highlighter-rouge">RandomNumberGenerator</code> 이므로, 이 프로토콜을 준수하는 모든 생성기들 (generators) 에 (공통으로) 적용되는 방식으로만, <code class="highlighter-rouge">Dice</code> 클래스와 <code class="highlighter-rouge">generator</code> 가 상호 작용할 수 있습니다. 이 말은 생성기의 실제 타입 (underlying type) 에 정의된 메소드나 속성은 사용할 수 없다는 의미입니다. 하지만 상위 클래스에서 하위 클래스로 ‘내림 변환 (downcast)’ 이 가능한 것처럼 프로토콜 타입에서 실제 타입으로 내림 형변환이 가능하긴 합니다. 이는 <a href="/swift/language/grammar/type/casting/2020/03/31/Type-Casting.html#downcasting-내림-변환하기">Downcasting (내림 변환하기)</a> 에서 설명합니다.</p>

<p><code class="highlighter-rouge">Dice</code> 는 초기 상태를 설정하는 초기자 (initializer) 도 가지고 있습니다. 이 초기자는 <code class="highlighter-rouge">generator</code> 라는 매개 변수를 가지는데, 타입은 역시  <code class="highlighter-rouge">RandomNumberGenerator</code> 입니다. 이를 준수하는 타입이라면 아무 값이라도 사용하여 새 <code class="highlighter-rouge">Dice</code> 인스턴스를 초기화 할 수 있습니다.</p>

<p><code class="highlighter-rouge">Dice</code> 의 인스턴스 메소드는 <code class="highlighter-rouge">roll</code> 한 개 뿐이며, ‘1’ 과 ‘주사위-면 개수’ 사이의 정수 값을 반환합니다. 이 메소드는 생성기의 <code class="highlighter-rouge">random()</code> 메소드를 호출하여 0.0 과 1.0 사이의 새로운 난수를 생성한 다음, 이 난수를 사용하여 올바른 범위 내에 있는 ‘주사위 굴림 값’을 생성합니다. <code class="highlighter-rouge">generator</code> 가 <code class="highlighter-rouge">RandomNumberGenerator</code> 를 따르고 있기 때문에, 호출할 수 있는 <code class="highlighter-rouge">random()</code> 메소드를 가지고 있음이 보장됩니다.</p>

<p><code class="highlighter-rouge">Dice</code> 클래스를 사용하여 <code class="highlighter-rouge">LinearCongruentialGenerator</code> 인스턴스를 난수 생성기로 가지는 6면체 주사위를 만드는 방법은 다음과 같습니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">d6</span> <span class="o">=</span> <span class="kt">Dice</span><span class="p">(</span><span class="nv">sides</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="nv">generator</span><span class="p">:</span> <span class="kt">LinearCongruentialGenerator</span><span class="p">())</span>
<span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="o">...</span><span class="mi">5</span> <span class="p">{</span>
  <span class="nf">print</span><span class="p">(</span><span class="s">"Random dice roll is </span><span class="se">\(</span><span class="n">d6</span><span class="o">.</span><span class="nf">roll</span><span class="p">()</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Random dice roll is 3</span>
<span class="c1">// Random dice roll is 5</span>
<span class="c1">// Random dice roll is 4</span>
<span class="c1">// Random dice roll is 5</span>
<span class="c1">// Random dice roll is 4</span>
</code></pre></div></div>

<h3 id="delegation">Delegation</h3>

<h3 id="adding-protocol-conformance-with-an-extension">Adding Protocol Conformance with an Extension</h3>

<p><strong>Conditionally Conforming to a Protocol</strong></p>

<p><strong>Declaring Protocol Adoption with and Extension</strong></p>

<h3 id="collections-of-protocol-types">Collections of Protocol Types</h3>

<h3 id="protocol-inheritance">Protocol Inheritance</h3>

<h3 id="class-only-protocols">Class-Only Protocols</h3>

<h3 id="protocol-composition">Protocol Composition</h3>

<h3 id="checking-for-protocol-conformance-프로토콜-준수-검사하기">Checking for Protocol Conformance (프로토콜 준수 검사하기)</h3>

<h3 id="optional-protocol-requirements-옵셔널-프로토콜-필수-조건">Optional Protocol Requirements (옵셔널 프로토콜 필수 조건)</h3>

<h3 id="protocol-extensions-프로토콜-확장">Protocol Extensions (프로토콜 확장)</h3>

<p>프로토콜은 확장해서 이를 준수하는 타입의 메소드, 초기자, ‘첨자 연산 (subscript), 그리고 ‘계산 속성 (computed property)’ 에 대한 구현을 제공할 수 있습니다. 이것은, 개별 준수 타입이나 전역 함수 대신, 프로토콜 자체에서 동작을 정의할 수 있게 해줍니다.</p>

<p>예를 들어. <code class="highlighter-rouge">RandomNumberGenerator</code> 프로토콜을 확장하면 <code class="highlighter-rouge">randomBool()</code> 메소드를 제공하도록 해서, ‘필수 (required)’ 메소드인 <code class="highlighter-rouge">random()</code> 의 결과를 가지고 <code class="highlighter-rouge">Bool</code> 난수 값을 반환하게 할 수도 있습니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">RandomNumberGenerator</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">randomBool</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">random</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">0.5</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>프로토콜에 확장을 만드는 것으로도 모든 준수 타입들이 자동으로 메소드의 구현부를 가지며, 따로 수정같은 것을 할 필요가 전혀 없습니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">generator</span> <span class="o">=</span> <span class="kt">LinearCongruentialGenerator</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"Here's a random number: </span><span class="se">\(</span><span class="n">generator</span><span class="o">.</span><span class="nf">random</span><span class="p">()</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="c1">// Prints "Here's a random number: 0.3746499199817101"</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"And here's a random Boolean: </span><span class="se">\(</span><span class="n">generator</span><span class="o">.</span><span class="nf">randomBool</span><span class="p">()</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="c1">// Prints "And here's a random Boolean: true"</span>
</code></pre></div></div>
<p>프로토콜 확장은 준수 타입에 구현을 추가 할 수는 있지만, 다른 프로토콜을 확장하거나 상속하여 또 하나의 프로토콜을 만들 수는 없습니다. 프로토콜 상속은 항상 해당 프로토콜 선언 그 자체에 한정된 것입니다.</p>

<p><strong>Providing Default Implementations (기본 구현 제공하기)</strong></p>

<p>프로토콜 확장을 사용하면 해당 프로토콜의 어떤 ‘메소드 필수 조건’ 이나 ‘계산 속성 필수 조건’ 에 대한 ‘기본 구현’ 을 제공할 수 있습니다. 준수 타입이 ‘필수 (required)’ 메소드나 속성에 대해 자체적으로 구현을 제공할 경우, 이 구현이 확장에 의해 제공된 것을 대체하여 사용됩니다.</p>

<blockquote>
  <p>확장에 의해 기본 구현이 제공되는 프로토콜 ‘필수 조건’ 은 선택적 (optional) 프로토콜 ‘필수 조건’ 과는 다릅니다. 준수하는 타입이 자체적으로 구현을 제공 할 필요가 없다는 것은 같지만, 기본 구현을 가지는 ‘필수 조건’ 은 ‘옵셔널 연쇄 (optional chaining)’ 없이 호출 할 수 있습니다.</p>
</blockquote>

<p>예를 들어, <code class="highlighter-rouge">TextRepresentable</code> 프로토콜을 상속하는 <code class="highlighter-rouge">PrettyTextRepresentable</code> 프로토콜은 요구 속성인 <code class="highlighter-rouge">prettyTextualDescription</code> 의 기본 구현으로 간단히 <code class="highlighter-rouge">textualDescription</code> 속성을 반환하도록 할 수도 있습니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">PrettyTextRepresentable</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">prettyTextualDescription</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">textualDescription</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Adding Constraints to Protocol Extensions (프로토콜을 확장할 때 구속 조건 추가하기)</strong></p>

<p>프로토콜 확장을 정의할 때 ‘구속 조건 (constraints)’ 을 지정해서, 조건을 만족하는 준수 타입만 확장에 있는 메소드와 속성을 사용하게 할 수 있습니다. 이 ‘구속 조건’ 은 확장하려는 프로토콜의 이름 뒤에 일반화된 (generic) <code class="highlighter-rouge">where</code> 구절을 사용해서 붙입니다. 일반화된 <code class="highlighter-rouge">where</code> 구절에 대한 더 자세한 내용은 <a href="/swift/language/grammar/generic/parameters/arguments/2017/03/16/Generic-Parameters-and-Arguments.html#generic-where-clauses-일반화된-where-구절">Generic Where Clauses (일반화된 ‘Where’ 구절)</a> 를 보도록 합니다.<sup id="fnref:POP" role="doc-noteref"><a href="#fn:POP" class="footnote">4</a></sup></p>

<p>예를 들어, <code class="highlighter-rouge">Collection</code> (집합체) 프로토콜을 확장하면서 각 요소가 <code class="highlighter-rouge">Equatable</code> 프로토콜을 준수하는 경우에만 적용되도록 할 수 있습니다. 컬렉션의 요소를 (표준 라이브러리의 일부이기도 한) <code class="highlighter-rouge">Equatable</code> 프로토콜로만 제약하면, <code class="highlighter-rouge">==</code> 와 <code class="highlighter-rouge">!=</code> 연산자를 사용하여 두 요소가 같은지 다른지 검사할 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">Collection</span> <span class="k">where</span> <span class="kt">Element</span><span class="p">:</span> <span class="kt">Equatable</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">allEqual</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">element</span> <span class="k">in</span> <span class="k">self</span> <span class="p">{</span>
      <span class="k">if</span> <span class="n">element</span> <span class="o">!=</span> <span class="k">self</span><span class="o">.</span><span class="n">first</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">allEqual()</code> 메소드는 컬렉션의 모든 요소가 같을 때만 <code class="highlighter-rouge">true</code> 를 반환합니다.</p>

<p>두 개의 정수 배열 (array) 이 있는데, 하나는 모든 요소가 같고 다른 하나는 그렇지 않다고 해 봅시다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">equalNumbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">]</span>
<span class="k">let</span> <span class="nv">differentNumbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">]</span>
</code></pre></div></div>

<p>배열 (타입)은 <code class="highlighter-rouge">Collection </code>을 준수하고 정수 (타입)은 <code class="highlighter-rouge">Equatable</code> 을 준수하므로, <code class="highlighter-rouge">equalNumbers</code> 와 <code class="highlighter-rouge">differentNumbers</code> 는 <code class="highlighter-rouge">allEqual()</code> 메소드를 사용할 수 있습니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">equalNumbers</span><span class="o">.</span><span class="nf">allEqual</span><span class="p">())</span>
<span class="c1">// Prints "true"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">differentNumbers</span><span class="o">.</span><span class="nf">allEqual</span><span class="p">())</span>
<span class="c1">// Prints "false"</span>
</code></pre></div></div>

<blockquote>
  <p>(프로토콜을) 준수하는 타입이 ‘구속 조건’ 이 있는 확장 여러 개의 ‘필수 조건’ 을 동시에 만족해서 하나의 메소드 또는 속성이 여러 개의 구현을 동시에 가지게 될 경우, 스위프트는 가장 세분화된 ‘구속 조건’ 을 따르는 구현을 사용합니다.</p>
</blockquote>

<h3 id="생각해보기">생각해보기</h3>

<h3 id="참고-자료">참고 자료</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:Protocols" role="doc-endnote">
      <p>원문은 <a href="https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#">Protocols</a> 에서 확인할 수 있습니다. <a href="#fnref:Protocols" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:protocol" role="doc-endnote">
      <p><code class="highlighter-rouge">protocol</code>은 ‘규약’이라는 뜻을 갖고 있지만, 스위프트 언어에서는 하나의 keyword 이므로, <code class="highlighter-rouge">class</code>를 ‘클래스’라로 하듯이, 발음 그대로 ‘프로토콜’이라고 옮깁니다. 다만 필요한 경우에는 ‘규약’ 이라는 의미를 살려서 번역하도록 하겠습니다. <a href="#fnref:protocol" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:blueprint" role="doc-endnote">
      <p>blueprint는 ‘청사진’이라는 뜻을 갖고 있는데, 좀 더 의미에 와닫게 ‘밑그림’이라는 단어로 옮겼습니다. 실제 구현이 아니라 따라야할 규약들만 정한다는 의미에서 밑그림이라는 단어를 선택했습니다. <a href="#fnref:blueprint" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:POP" role="doc-endnote">
      <p><a href="https://developer.apple.com/videos/play/wwdc2015/408/">Protocol Oriented Programming</a>의 핵심이라고 할 수 있습니다. Protocol Oriented Programming 에 대해서는 <a href="https://www.raywenderlich.com/6742901-protocol-oriented-programming-tutorial-in-swift-5-1-getting-started">Protocol-Oriented Programming Tutorial in Swift 5.1: Getting Started</a> 에서 더 알아볼 수 있습니다. <a href="#fnref:POP" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET