I")<p>Swift로 웹 관련 프로그래밍을 하다보면 url에서 특정 부분을 추출해야할 경우가 생깁니다.</p>

<p>예를 들어서, 아래와 같은 웹페이지 주소가 있다고 가정합시다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="s">"http://www.myurl.com?param1=value1&amp;param2=value2"</span>
</code></pre></div></div>

<p>위의 주소에서 param1에 해당하는 값인 value1 만을 뽑아내야 하는 경우가 있을 수 있습니다.</p>

<p>이 경우에 Foundation에 있는 NSURLComponents 클래스와 이 클래스의 속성들을 사용하면 편리합니다. NSURLComponents 클래스를 사용하면 따로 NSURL을 파싱하는 다른 외부 라이브러리를 사용하지 않아도 Swift에서 url을 쉽게 다룰 수 있습니다.<sup id="fnref:Alamofire" role="doc-noteref"><a href="#fn:Alamofire" class="footnote" rel="footnote">1</a></sup></p>

<h3 id="nsurlcomponents-클래스"><strong>NSURLComponents</strong> 클래스</h3>

<p>NSURLComponents 클래스는 <code class="language-plaintext highlighter-rouge">RFC 3986</code>에 기초하여 URL을 파싱하고, 구성 요소들로 URL을 만드는 용도로 설계된 클래스입니다.<sup id="fnref:NSURLComponents" role="doc-noteref"><a href="#fn:NSURLComponents" class="footnote" rel="footnote">2</a></sup></p>

<p>애플의 문서에 따르면 NSURL은 예전 RFC를 따르기 때문에 NSURLComponents와는 동작방식이 조금 다르다고 합니다. 하지만, NSURL과 NSURLComponents는 서로 쉽게 변환할 수 있습니다. 보다 자세한 내용은 애플의 <a href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLComponents_class/">NSURLComponents Class Reference</a> 를 참고하면 됩니다.</p>

<h4 id="queryitems-속성"><strong>queryItems</strong> 속성</h4>

<p>NSURLComponents 클래스의 queryItems 속성은 URL 요소들을 name/value 쌍의 배열로 저장합니다. 여기서 name/value 쌍은 NSURLQueryItem 타입입니다.<br />
이 queryItems 속성을 사용하면 url에서 원하는 부분을 name을 키(key)로 해서 찾을 수 있습니다.</p>

<blockquote>
  <p>queryItems가 아니라 query를 사용해서 파싱하는 방법도 있는 것 같습니다만,<sup id="fnref:NSURL_query" role="doc-noteref"><a href="#fn:NSURL_query" class="footnote" rel="footnote">3</a></sup>, <sup id="fnref:NSURL_query_Parsing" role="doc-noteref"><a href="#fn:NSURL_query_Parsing" class="footnote" rel="footnote">4</a></sup> queryItems를 사용하는 것이 더 편한 것 같습니다.<sup id="fnref:NSURL_Parsing" role="doc-noteref"><a href="#fn:NSURL_Parsing" class="footnote" rel="footnote">5</a></sup></p>
</blockquote>

<h3 id="sample-code">Sample Code</h3>

<p>앞의 url에서 <code class="language-plaintext highlighter-rouge">param1</code>에 해당하는 <code class="language-plaintext highlighter-rouge">value1</code>를 리턴하는 함수는 다음과 같습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="kt">ParsingURL</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">urlComponents</span> <span class="o">=</span> <span class="kt">NSURLComponents</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">queryItems</span> <span class="o">=</span> <span class="n">urlComponents</span><span class="p">?</span><span class="o">.</span><span class="n">queryItems</span>
    <span class="k">let</span> <span class="nv">param</span> <span class="o">=</span> <span class="n">queryItems</span><span class="p">?</span><span class="o">.</span><span class="nf">filter</span><span class="p">({</span><span class="nv">$0</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="s">"param1"</span><span class="p">})</span><span class="o">.</span><span class="n">first</span>

    <span class="k">let</span> <span class="nv">value</span> <span class="o">=</span> <span class="n">param</span><span class="p">?</span><span class="o">.</span><span class="n">value</span> <span class="p">??</span> <span class="s">""</span>

    <span class="k">return</span> <span class="n">value</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위의 코드를 보면 NSURLComponents 클래스를 사용하여 String 형태로 전달된 url을 urlComponents라는 상수에 담고, 이 상수의 queryItems 속성에서 filter를 통하여 param1에 해당하는 값을 추출해 내는 것을 알 수 있습니다.</p>

<p>마지막으로 값의 추출은 항상 성공하는 것은 아니므로 <code class="language-plaintext highlighter-rouge">nil</code> 인지를 체크하여 <code class="language-plaintext highlighter-rouge">nil</code> 일 경우 빈 문자열을 반환하도록 합니다.</p>

<p>사용할 때는 아래와 같이 하면 됩니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="kt">ParsingURL</span><span class="p">(</span><span class="n">url2</span><span class="p">))</span>
</code></pre></div></div>

<p>위의 예제 코드에서 queryItems의 값을 아래와 같이 for-in 범위 반복문으로 출력해보면,</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">queryItems</span><span class="o">!</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"[</span><span class="se">\(</span><span class="n">item</span><span class="o">.</span><span class="n">name</span><span class="se">)</span><span class="s"> : </span><span class="se">\(</span><span class="n">item</span><span class="o">.</span><span class="n">value</span><span class="o">!</span><span class="se">)</span><span class="s">]"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>다음과 같은 결과를 얻을 수 있습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[param1 : value1]
[param2 : value2]
</code></pre></div></div>

<h3 id="고찰-하기">고찰 하기</h3>

<p>URL을 파싱하기 위한 <strong>RFC</strong> 및 <strong>RFC 3986</strong> 이 무엇인지는 아직 잘 모릅니다. 이 부분은 나중에 따로 내용을 업데이트 할 예정입니다.</p>

<p>Swift 프로그래밍에서는 URL을 다룰 경우에 본문과 같이 Foundation 프레임웍을 직접 사용하기 보다는 Alamofire 같은 외부 라이브러리를 많이 사용하는 것 같습니다. <sup id="fnref:Alamofire_RayWenderlich" role="doc-noteref"><a href="#fn:Alamofire_RayWenderlich" class="footnote" rel="footnote">6</a></sup>  <sup id="fnref:Alamofire_Tstory" role="doc-noteref"><a href="#fn:Alamofire_Tstory" class="footnote" rel="footnote">7</a></sup> 아직 제가 Alamofire를 직접 사용해 본적은 없지만 상당히 많은 개발자들이 사용하고 있는 것으로 알고 있습니다. 기회가 되면 AAlamofire 사용법에 대해서도 정리하도록 하겠습니다.</p>

<h3 id="참고-자료">참고 자료</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:Alamofire" role="doc-endnote">
      <p>HTTP 통신 관련하여서 가장 유명한 라이브러리는 <a href="https://github.com/Alamofire/Alamofire">Alamofire</a>인 것 같습니다. Swift로 만든 오픈 소스 라이브러리이며 GitHub나 CocoaPods을 통해서 설치할 수 있습니다. <a href="#fnref:Alamofire" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:NSURLComponents" role="doc-endnote">
      <p>NSURLComponents 클래스에 대한 설명은 애플의 reference 사이트인 <a href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLComponents_class/#//apple_ref/occ/instp/NSURLComponents/queryItems">NSURLComponents Class Reference</a> 부분을 참고하시면 됩니다. <a href="#fnref:NSURLComponents" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:NSURL_query" role="doc-endnote">
      <p>NSURL의 query를 사용해서 url을 파싱하는 방법은 <a href="http://stackoverflow.com/questions/3997976/parse-nsurl-query-property">stackoverflow: Parse NSURL query property</a> 에 잘 설명되어 있습니다. <a href="#fnref:NSURL_query" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:NSURL_query_Parsing" role="doc-endnote">
      <p><a href="https://byunsooblog.wordpress.com/2014/03/16/nsurl-파라미터-파싱하기/comment-page-1/">NSURL 파라미터 파싱하기</a> <a href="#fnref:NSURL_query_Parsing" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:NSURL_Parsing" role="doc-endnote">
      <p><a href="http://www.sellmyapplication.com/question/parse-nsurl-query-property/">Parse NSURL query property</a> 라는 게시글의 답글을 보다 보면 query를 이용한 경우와 queryItems를 이용한 경우의 다른점이 나오는데, 이를 보고 queryItems를 사용하기로 결정하게 되었습니다. <a href="#fnref:NSURL_Parsing" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:Alamofire_RayWenderlich" role="doc-endnote">
      <p><a href="https://www.raywenderlich.com/121540/alamofire-tutorial-getting-started">Alamofire Tutorial: Getting Started</a> <a href="#fnref:Alamofire_RayWenderlich" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:Alamofire_Tstory" role="doc-endnote">
      <p><a href="http://rhammer.tistory.com/115">Alamofire 사용하기</a> <a href="#fnref:Alamofire_Tstory" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET